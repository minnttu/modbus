
juma.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000232  00800100  0000131e  000013b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000131e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000015d  00800332  00800332  000015e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015e4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000308  00000000  00000000  00001614  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003259  00000000  00000000  0000191c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010d7  00000000  00000000  00004b75  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001be8  00000000  00000000  00005c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006ec  00000000  00000000  00007834  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000e9f  00000000  00000000  00007f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000030b5  00000000  00000000  00008dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000228  00000000  00000000  0000be74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 28 09 	jmp	0x1250	; 0x1250 <__vector_12>
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	13 e0       	ldi	r17, 0x03	; 3
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee e1       	ldi	r30, 0x1E	; 30
      a0:	f3 e1       	ldi	r31, 0x13	; 19
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 33       	cpi	r26, 0x32	; 50
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	24 e0       	ldi	r18, 0x04	; 4
      b4:	a2 e3       	ldi	r26, 0x32	; 50
      b6:	b3 e0       	ldi	r27, 0x03	; 3
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	af 38       	cpi	r26, 0x8F	; 143
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	03 d0       	rcall	.+6      	; 0xca <main>
      c4:	0c 94 8d 09 	jmp	0x131a	; 0x131a <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <main>:
static USHORT   usRegInputBuf[REG_INPUT_NREGS];

/* ----------------------- Start implementation -----------------------------*/
int
main( void )
{
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	00 d0       	rcall	.+0      	; 0xd0 <main+0x6>
      d0:	1f 92       	push	r1
      d2:	cd b7       	in	r28, 0x3d	; 61
      d4:	de b7       	in	r29, 0x3e	; 62
    const UCHAR     ucSlaveID[] = { 0xAA, 0xBB, 0xCC };
      d6:	8a ea       	ldi	r24, 0xAA	; 170
      d8:	89 83       	std	Y+1, r24	; 0x01
      da:	8b eb       	ldi	r24, 0xBB	; 187
      dc:	8a 83       	std	Y+2, r24	; 0x02
      de:	8c ec       	ldi	r24, 0xCC	; 204
      e0:	8b 83       	std	Y+3, r24	; 0x03
    eMBErrorCode    eStatus;

    eStatus = eMBInit( MB_RTU, 0x0A, 0, 38400, MB_PAR_EVEN );
      e2:	68 94       	set
      e4:	ee 24       	eor	r14, r14
      e6:	e1 f8       	bld	r14, 1
      e8:	00 e0       	ldi	r16, 0x00	; 0
      ea:	16 e9       	ldi	r17, 0x96	; 150
      ec:	20 e0       	ldi	r18, 0x00	; 0
      ee:	30 e0       	ldi	r19, 0x00	; 0
      f0:	40 e0       	ldi	r20, 0x00	; 0
      f2:	6a e0       	ldi	r22, 0x0A	; 10
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	44 d0       	rcall	.+136    	; 0x180 <eMBInit>

    eStatus = eMBSetSlaveID( 0x34, TRUE, ucSlaveID, 3 );
      f8:	23 e0       	ldi	r18, 0x03	; 3
      fa:	30 e0       	ldi	r19, 0x00	; 0
      fc:	ae 01       	movw	r20, r28
      fe:	4f 5f       	subi	r20, 0xFF	; 255
     100:	5f 4f       	sbci	r21, 0xFF	; 255
     102:	61 e0       	ldi	r22, 0x01	; 1
     104:	84 e3       	ldi	r24, 0x34	; 52
     106:	3d d6       	rcall	.+3194   	; 0xd82 <eMBSetSlaveID>
    sei(  );
     108:	78 94       	sei

    /* Enable the Modbus Protocol Stack. */
    eStatus = eMBEnable(  );
     10a:	ca d0       	rcall	.+404    	; 0x2a0 <eMBEnable>
    for( ;; )
    {
        ( void )eMBPoll(  );

        /* Here we simply count the number of poll cycles. */
        usRegInputBuf[0]++;
     10c:	02 e3       	ldi	r16, 0x32	; 50
     10e:	13 e0       	ldi	r17, 0x03	; 3
    /* Enable the Modbus Protocol Stack. */
    eStatus = eMBEnable(  );

    for( ;; )
    {
        ( void )eMBPoll(  );
     110:	d6 d0       	rcall	.+428    	; 0x2be <eMBPoll>

        /* Here we simply count the number of poll cycles. */
        usRegInputBuf[0]++;
     112:	f8 01       	movw	r30, r16
     114:	80 81       	ld	r24, Z
     116:	91 81       	ldd	r25, Z+1	; 0x01
     118:	01 96       	adiw	r24, 0x01	; 1
     11a:	91 83       	std	Z+1, r25	; 0x01
     11c:	80 83       	st	Z, r24
     11e:	f8 cf       	rjmp	.-16     	; 0x110 <main+0x46>

00000120 <eMBRegInputCB>:
eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    int             iRegIndex;

    if( ( usAddress >= REG_INPUT_START )
     120:	68 3e       	cpi	r22, 0xE8	; 232
     122:	23 e0       	ldi	r18, 0x03	; 3
     124:	72 07       	cpc	r23, r18
     126:	f0 f0       	brcs	.+60     	; 0x164 <eMBRegInputCB+0x44>
        && ( usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS ) )
     128:	9b 01       	movw	r18, r22
     12a:	24 0f       	add	r18, r20
     12c:	35 1f       	adc	r19, r21
     12e:	2d 3e       	cpi	r18, 0xED	; 237
     130:	33 40       	sbci	r19, 0x03	; 3
     132:	d0 f4       	brcc	.+52     	; 0x168 <eMBRegInputCB+0x48>
    {
        iRegIndex = ( int )( usAddress - usRegInputStart );
        while( usNRegs > 0 )
     134:	41 15       	cp	r20, r1
     136:	51 05       	cpc	r21, r1
     138:	c9 f0       	breq	.+50     	; 0x16c <eMBRegInputCB+0x4c>
     13a:	e8 2f       	mov	r30, r24
     13c:	f9 2f       	mov	r31, r25
     13e:	db 01       	movw	r26, r22
     140:	aa 0f       	add	r26, r26
     142:	bb 1f       	adc	r27, r27
     144:	ae 59       	subi	r26, 0x9E	; 158
     146:	b4 40       	sbci	r27, 0x04	; 4
        {
            *pucRegBuffer++ =
                ( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
     148:	8c 91       	ld	r24, X
     14a:	11 96       	adiw	r26, 0x01	; 1
     14c:	9c 91       	ld	r25, X
     14e:	11 97       	sbiw	r26, 0x01	; 1
     150:	12 96       	adiw	r26, 0x02	; 2
     152:	90 83       	st	Z, r25
            *pucRegBuffer++ =
                ( unsigned char )( usRegInputBuf[iRegIndex] & 0xFF );
     154:	81 83       	std	Z+1, r24	; 0x01
            iRegIndex++;
            usNRegs--;
     156:	41 50       	subi	r20, 0x01	; 1
     158:	51 09       	sbc	r21, r1
     15a:	32 96       	adiw	r30, 0x02	; 2

    if( ( usAddress >= REG_INPUT_START )
        && ( usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS ) )
    {
        iRegIndex = ( int )( usAddress - usRegInputStart );
        while( usNRegs > 0 )
     15c:	41 15       	cp	r20, r1
     15e:	51 05       	cpc	r21, r1
     160:	99 f7       	brne	.-26     	; 0x148 <eMBRegInputCB+0x28>
     162:	06 c0       	rjmp	.+12     	; 0x170 <eMBRegInputCB+0x50>
            usNRegs--;
        }
    }
    else
    {
        eStatus = MB_ENOREG;
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	08 95       	ret
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	08 95       	ret
}

eMBErrorCode
eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
    eMBErrorCode    eStatus = MB_ENOERR;
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	08 95       	ret
     170:	80 e0       	ldi	r24, 0x00	; 0
    {
        eStatus = MB_ENOREG;
    }

    return eStatus;
}
     172:	08 95       	ret

00000174 <eMBRegHoldingCB>:
eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
                 eMBRegisterMode eMode )
{
    return MB_ENOREG;
}
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	08 95       	ret

00000178 <eMBRegCoilsCB>:
eMBErrorCode
eMBRegCoilsCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils,
               eMBRegisterMode eMode )
{
    return MB_ENOREG;
}
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	08 95       	ret

0000017c <eMBRegDiscreteCB>:

eMBErrorCode
eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
    return MB_ENOREG;
}
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	08 95       	ret

00000180 <eMBInit>:
    else
    {
        eStatus = MB_EILLSTATE;
    }
    return eStatus;
}
     180:	ef 92       	push	r14
     182:	0f 93       	push	r16
     184:	1f 93       	push	r17
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
     18a:	c8 2f       	mov	r28, r24
     18c:	86 2f       	mov	r24, r22
     18e:	64 2f       	mov	r22, r20
     190:	a9 01       	movw	r20, r18
     192:	98 01       	movw	r18, r16
     194:	9f ef       	ldi	r25, 0xFF	; 255
     196:	98 0f       	add	r25, r24
     198:	97 3f       	cpi	r25, 0xF7	; 247
     19a:	08 f0       	brcs	.+2      	; 0x19e <eMBInit+0x1e>
     19c:	77 c0       	rjmp	.+238    	; 0x28c <eMBInit+0x10c>
     19e:	80 93 4c 03 	sts	0x034C, r24
     1a2:	cc 23       	and	r28, r28
     1a4:	19 f0       	breq	.+6      	; 0x1ac <eMBInit+0x2c>
     1a6:	c1 30       	cpi	r28, 0x01	; 1
     1a8:	99 f1       	breq	.+102    	; 0x210 <eMBInit+0x90>
     1aa:	64 c0       	rjmp	.+200    	; 0x274 <eMBInit+0xf4>
     1ac:	eb e3       	ldi	r30, 0x3B	; 59
     1ae:	f7 e0       	ldi	r31, 0x07	; 7
     1b0:	f0 93 48 03 	sts	0x0348, r31
     1b4:	e0 93 47 03 	sts	0x0347, r30
     1b8:	e4 e4       	ldi	r30, 0x44	; 68
     1ba:	f7 e0       	ldi	r31, 0x07	; 7
     1bc:	f0 93 46 03 	sts	0x0346, r31
     1c0:	e0 93 45 03 	sts	0x0345, r30
     1c4:	e2 e8       	ldi	r30, 0x82	; 130
     1c6:	f7 e0       	ldi	r31, 0x07	; 7
     1c8:	f0 93 4a 03 	sts	0x034A, r31
     1cc:	e0 93 49 03 	sts	0x0349, r30
     1d0:	eb e4       	ldi	r30, 0x4B	; 75
     1d2:	f7 e0       	ldi	r31, 0x07	; 7
     1d4:	f0 93 44 03 	sts	0x0344, r31
     1d8:	e0 93 43 03 	sts	0x0343, r30
     1dc:	10 92 42 03 	sts	0x0342, r1
     1e0:	10 92 41 03 	sts	0x0341, r1
     1e4:	ef ec       	ldi	r30, 0xCF	; 207
     1e6:	f7 e0       	ldi	r31, 0x07	; 7
     1e8:	f0 93 8a 03 	sts	0x038A, r31
     1ec:	e0 93 89 03 	sts	0x0389, r30
     1f0:	e0 e2       	ldi	r30, 0x20	; 32
     1f2:	f8 e0       	ldi	r31, 0x08	; 8
     1f4:	f0 93 86 03 	sts	0x0386, r31
     1f8:	e0 93 85 03 	sts	0x0385, r30
     1fc:	ea e5       	ldi	r30, 0x5A	; 90
     1fe:	f8 e0       	ldi	r31, 0x08	; 8
     200:	f0 93 88 03 	sts	0x0388, r31
     204:	e0 93 87 03 	sts	0x0387, r30
     208:	0e 2d       	mov	r16, r14
     20a:	fe d5       	rcall	.+3068   	; 0xe08 <eMBRTUInit>
     20c:	d8 2f       	mov	r29, r24
     20e:	33 c0       	rjmp	.+102    	; 0x276 <eMBInit+0xf6>
     210:	e4 e2       	ldi	r30, 0x24	; 36
     212:	f2 e0       	ldi	r31, 0x02	; 2
     214:	f0 93 48 03 	sts	0x0348, r31
     218:	e0 93 47 03 	sts	0x0347, r30
     21c:	ee e2       	ldi	r30, 0x2E	; 46
     21e:	f2 e0       	ldi	r31, 0x02	; 2
     220:	f0 93 46 03 	sts	0x0346, r31
     224:	e0 93 45 03 	sts	0x0345, r30
     228:	e8 e6       	ldi	r30, 0x68	; 104
     22a:	f2 e0       	ldi	r31, 0x02	; 2
     22c:	f0 93 4a 03 	sts	0x034A, r31
     230:	e0 93 49 03 	sts	0x0349, r30
     234:	e5 e3       	ldi	r30, 0x35	; 53
     236:	f2 e0       	ldi	r31, 0x02	; 2
     238:	f0 93 44 03 	sts	0x0344, r31
     23c:	e0 93 43 03 	sts	0x0343, r30
     240:	10 92 42 03 	sts	0x0342, r1
     244:	10 92 41 03 	sts	0x0341, r1
     248:	e3 eb       	ldi	r30, 0xB3	; 179
     24a:	f2 e0       	ldi	r31, 0x02	; 2
     24c:	f0 93 8a 03 	sts	0x038A, r31
     250:	e0 93 89 03 	sts	0x0389, r30
     254:	e3 e5       	ldi	r30, 0x53	; 83
     256:	f3 e0       	ldi	r31, 0x03	; 3
     258:	f0 93 86 03 	sts	0x0386, r31
     25c:	e0 93 85 03 	sts	0x0385, r30
     260:	e2 ee       	ldi	r30, 0xE2	; 226
     262:	f3 e0       	ldi	r31, 0x03	; 3
     264:	f0 93 88 03 	sts	0x0388, r31
     268:	e0 93 87 03 	sts	0x0387, r30
     26c:	0e 2d       	mov	r16, r14
     26e:	d3 d0       	rcall	.+422    	; 0x416 <eMBASCIIInit>
     270:	d8 2f       	mov	r29, r24
     272:	01 c0       	rjmp	.+2      	; 0x276 <eMBInit+0xf6>
     274:	d2 e0       	ldi	r29, 0x02	; 2
     276:	d1 11       	cpse	r29, r1
     278:	0c c0       	rjmp	.+24     	; 0x292 <eMBInit+0x112>
     27a:	42 d7       	rcall	.+3716   	; 0x1100 <xMBPortEventInit>
     27c:	88 23       	and	r24, r24
     27e:	41 f0       	breq	.+16     	; 0x290 <eMBInit+0x110>
     280:	c0 93 4b 03 	sts	0x034B, r28
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	80 93 30 01 	sts	0x0130, r24
     28a:	03 c0       	rjmp	.+6      	; 0x292 <eMBInit+0x112>
     28c:	d2 e0       	ldi	r29, 0x02	; 2
     28e:	01 c0       	rjmp	.+2      	; 0x292 <eMBInit+0x112>
     290:	d3 e0       	ldi	r29, 0x03	; 3
     292:	8d 2f       	mov	r24, r29
     294:	df 91       	pop	r29
     296:	cf 91       	pop	r28
     298:	1f 91       	pop	r17
     29a:	0f 91       	pop	r16
     29c:	ef 90       	pop	r14
     29e:	08 95       	ret

000002a0 <eMBEnable>:
     2a0:	80 91 30 01 	lds	r24, 0x0130
     2a4:	81 30       	cpi	r24, 0x01	; 1
     2a6:	49 f4       	brne	.+18     	; 0x2ba <eMBEnable+0x1a>
     2a8:	e0 91 47 03 	lds	r30, 0x0347
     2ac:	f0 91 48 03 	lds	r31, 0x0348
     2b0:	09 95       	icall
     2b2:	10 92 30 01 	sts	0x0130, r1
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	08 95       	ret
     2ba:	86 e0       	ldi	r24, 0x06	; 6
     2bc:	08 95       	ret

000002be <eMBPoll>:

eMBErrorCode
eMBPoll( void )
{
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
     2c2:	1f 92       	push	r1
     2c4:	cd b7       	in	r28, 0x3d	; 61
     2c6:	de b7       	in	r29, 0x3e	; 62
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
     2c8:	80 91 30 01 	lds	r24, 0x0130
     2cc:	81 11       	cpse	r24, r1
     2ce:	94 c0       	rjmp	.+296    	; 0x3f8 <eMBPoll+0x13a>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
     2d0:	ce 01       	movw	r24, r28
     2d2:	01 96       	adiw	r24, 0x01	; 1
     2d4:	20 d7       	rcall	.+3648   	; 0x1116 <xMBPortEventGet>
     2d6:	81 30       	cpi	r24, 0x01	; 1
     2d8:	09 f0       	breq	.+2      	; 0x2dc <eMBPoll+0x1e>
     2da:	90 c0       	rjmp	.+288    	; 0x3fc <eMBPoll+0x13e>
    {
        switch ( eEvent )
     2dc:	89 81       	ldd	r24, Y+1	; 0x01
     2de:	81 30       	cpi	r24, 0x01	; 1
     2e0:	19 f0       	breq	.+6      	; 0x2e8 <eMBPoll+0x2a>
     2e2:	82 30       	cpi	r24, 0x02	; 2
     2e4:	d1 f0       	breq	.+52     	; 0x31a <eMBPoll+0x5c>
     2e6:	8c c0       	rjmp	.+280    	; 0x400 <eMBPoll+0x142>
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
     2e8:	e0 91 43 03 	lds	r30, 0x0343
     2ec:	f0 91 44 03 	lds	r31, 0x0344
     2f0:	4c e3       	ldi	r20, 0x3C	; 60
     2f2:	53 e0       	ldi	r21, 0x03	; 3
     2f4:	6e e3       	ldi	r22, 0x3E	; 62
     2f6:	73 e0       	ldi	r23, 0x03	; 3
     2f8:	80 e4       	ldi	r24, 0x40	; 64
     2fa:	93 e0       	ldi	r25, 0x03	; 3
     2fc:	09 95       	icall
            if( eStatus == MB_ENOERR )
     2fe:	81 11       	cpse	r24, r1
     300:	81 c0       	rjmp	.+258    	; 0x404 <eMBPoll+0x146>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
     302:	80 91 40 03 	lds	r24, 0x0340
     306:	90 91 4c 03 	lds	r25, 0x034C
     30a:	89 17       	cp	r24, r25
     30c:	11 f0       	breq	.+4      	; 0x312 <eMBPoll+0x54>
     30e:	81 11       	cpse	r24, r1
     310:	7b c0       	rjmp	.+246    	; 0x408 <eMBPoll+0x14a>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
     312:	82 e0       	ldi	r24, 0x02	; 2
     314:	f9 d6       	rcall	.+3570   	; 0x1108 <xMBPortEventPost>

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	7a c0       	rjmp	.+244    	; 0x40e <eMBPoll+0x150>
                }
            }
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
     31a:	a0 91 3e 03 	lds	r26, 0x033E
     31e:	b0 91 3f 03 	lds	r27, 0x033F
     322:	9c 91       	ld	r25, X
     324:	90 93 3b 03 	sts	0x033B, r25
            eException = MB_EX_ILLEGAL_FUNCTION;
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	80 93 3a 03 	sts	0x033A, r24
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
     32e:	80 91 00 01 	lds	r24, 0x0100
     332:	88 23       	and	r24, r24
     334:	31 f1       	breq	.+76     	; 0x382 <eMBPoll+0xc4>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
     336:	98 17       	cp	r25, r24
     338:	51 f0       	breq	.+20     	; 0x34e <eMBPoll+0x90>
     33a:	e3 e0       	ldi	r30, 0x03	; 3
     33c:	f1 e0       	ldi	r31, 0x01	; 1
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
            eException = MB_EX_ILLEGAL_FUNCTION;
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
     33e:	21 e0       	ldi	r18, 0x01	; 1
     340:	30 e0       	ldi	r19, 0x00	; 0
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
     342:	80 81       	ld	r24, Z
     344:	88 23       	and	r24, r24
     346:	e9 f0       	breq	.+58     	; 0x382 <eMBPoll+0xc4>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
     348:	98 13       	cpse	r25, r24
     34a:	15 c0       	rjmp	.+42     	; 0x376 <eMBPoll+0xb8>
     34c:	02 c0       	rjmp	.+4      	; 0x352 <eMBPoll+0x94>
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
            eException = MB_EX_ILLEGAL_FUNCTION;
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
     34e:	20 e0       	ldi	r18, 0x00	; 0
     350:	30 e0       	ldi	r19, 0x00	; 0
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
     352:	f9 01       	movw	r30, r18
     354:	ee 0f       	add	r30, r30
     356:	ff 1f       	adc	r31, r31
     358:	2e 0f       	add	r18, r30
     35a:	3f 1f       	adc	r19, r31
     35c:	f9 01       	movw	r30, r18
     35e:	e0 50       	subi	r30, 0x00	; 0
     360:	ff 4f       	sbci	r31, 0xFF	; 255
     362:	01 80       	ldd	r0, Z+1	; 0x01
     364:	f2 81       	ldd	r31, Z+2	; 0x02
     366:	e0 2d       	mov	r30, r0
     368:	6c e3       	ldi	r22, 0x3C	; 60
     36a:	73 e0       	ldi	r23, 0x03	; 3
     36c:	cd 01       	movw	r24, r26
     36e:	09 95       	icall
     370:	80 93 3a 03 	sts	0x033A, r24
                    break;
     374:	06 c0       	rjmp	.+12     	; 0x382 <eMBPoll+0xc4>
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
            eException = MB_EX_ILLEGAL_FUNCTION;
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
     376:	2f 5f       	subi	r18, 0xFF	; 255
     378:	3f 4f       	sbci	r19, 0xFF	; 255
     37a:	33 96       	adiw	r30, 0x03	; 3
     37c:	20 31       	cpi	r18, 0x10	; 16
     37e:	31 05       	cpc	r19, r1
     380:	01 f7       	brne	.-64     	; 0x342 <eMBPoll+0x84>
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
     382:	80 91 40 03 	lds	r24, 0x0340
     386:	88 23       	and	r24, r24
     388:	09 f4       	brne	.+2      	; 0x38c <eMBPoll+0xce>
     38a:	40 c0       	rjmp	.+128    	; 0x40c <eMBPoll+0x14e>
            {
                if( eException != MB_EX_NONE )
     38c:	60 91 3a 03 	lds	r22, 0x033A
     390:	66 23       	and	r22, r22
     392:	09 f1       	breq	.+66     	; 0x3d6 <eMBPoll+0x118>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
     394:	e0 91 3e 03 	lds	r30, 0x033E
     398:	f0 91 3f 03 	lds	r31, 0x033F
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	90 93 3d 03 	sts	0x033D, r25
     3a4:	80 93 3c 03 	sts	0x033C, r24
     3a8:	80 91 3b 03 	lds	r24, 0x033B
     3ac:	80 68       	ori	r24, 0x80	; 128
     3ae:	80 83       	st	Z, r24
                    ucMBFrame[usLength++] = eException;
     3b0:	20 91 3e 03 	lds	r18, 0x033E
     3b4:	30 91 3f 03 	lds	r19, 0x033F
     3b8:	80 91 3c 03 	lds	r24, 0x033C
     3bc:	90 91 3d 03 	lds	r25, 0x033D
     3c0:	ac 01       	movw	r20, r24
     3c2:	4f 5f       	subi	r20, 0xFF	; 255
     3c4:	5f 4f       	sbci	r21, 0xFF	; 255
     3c6:	50 93 3d 03 	sts	0x033D, r21
     3ca:	40 93 3c 03 	sts	0x033C, r20
     3ce:	f9 01       	movw	r30, r18
     3d0:	e8 0f       	add	r30, r24
     3d2:	f9 1f       	adc	r31, r25
     3d4:	60 83       	st	Z, r22
                }
                if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }                
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
     3d6:	40 91 3c 03 	lds	r20, 0x033C
     3da:	50 91 3d 03 	lds	r21, 0x033D
     3de:	60 91 3e 03 	lds	r22, 0x033E
     3e2:	70 91 3f 03 	lds	r23, 0x033F
     3e6:	e0 91 49 03 	lds	r30, 0x0349
     3ea:	f0 91 4a 03 	lds	r31, 0x034A
     3ee:	80 91 4c 03 	lds	r24, 0x034C
     3f2:	09 95       	icall

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	0b c0       	rjmp	.+22     	; 0x40e <eMBPoll+0x150>
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
    {
        return MB_EILLSTATE;
     3f8:	86 e0       	ldi	r24, 0x06	; 6
     3fa:	09 c0       	rjmp	.+18     	; 0x40e <eMBPoll+0x150>

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	07 c0       	rjmp	.+14     	; 0x40e <eMBPoll+0x150>
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	05 c0       	rjmp	.+10     	; 0x40e <eMBPoll+0x150>
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	03 c0       	rjmp	.+6      	; 0x40e <eMBPoll+0x150>
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	01 c0       	rjmp	.+2      	; 0x40e <eMBPoll+0x150>
     40c:	80 e0       	ldi	r24, 0x00	; 0
}
     40e:	0f 90       	pop	r0
     410:	df 91       	pop	r29
     412:	cf 91       	pop	r28
     414:	08 95       	ret

00000416 <eMBASCIIInit>:
static volatile UCHAR ucMBLFCharacter;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBASCIIInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
     416:	0f 93       	push	r16
     418:	86 2f       	mov	r24, r22
     41a:	ba 01       	movw	r22, r20
     41c:	a9 01       	movw	r20, r18
    eMBErrorCode    eStatus = MB_ENOERR;
    ( void )ucSlaveAddress;
    
    ENTER_CRITICAL_SECTION(  );
     41e:	f8 94       	cli
    ucMBLFCharacter = MB_ASCII_DEFAULT_LF;
     420:	9a e0       	ldi	r25, 0x0A	; 10
     422:	90 93 4d 03 	sts	0x034D, r25

    if( xMBPortSerialInit( ucPort, ulBaudRate, 7, eParity ) != TRUE )
     426:	27 e0       	ldi	r18, 0x07	; 7
     428:	96 d6       	rcall	.+3372   	; 0x1156 <xMBPortSerialInit>
     42a:	81 30       	cpi	r24, 0x01	; 1
     42c:	39 f4       	brne	.+14     	; 0x43c <eMBASCIIInit+0x26>
    {
        eStatus = MB_EPORTERR;
    }
    else if( xMBPortTimersInit( MB_ASCII_TIMEOUT_SEC * 20000UL ) != TRUE )
     42e:	80 e2       	ldi	r24, 0x20	; 32
     430:	9e e4       	ldi	r25, 0x4E	; 78
     432:	d3 d6       	rcall	.+3494   	; 0x11da <xMBPortTimersInit>
     434:	81 30       	cpi	r24, 0x01	; 1
     436:	21 f4       	brne	.+8      	; 0x440 <eMBASCIIInit+0x2a>

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBASCIIInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
    eMBErrorCode    eStatus = MB_ENOERR;
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	03 c0       	rjmp	.+6      	; 0x442 <eMBASCIIInit+0x2c>
    ENTER_CRITICAL_SECTION(  );
    ucMBLFCharacter = MB_ASCII_DEFAULT_LF;

    if( xMBPortSerialInit( ucPort, ulBaudRate, 7, eParity ) != TRUE )
    {
        eStatus = MB_EPORTERR;
     43c:	83 e0       	ldi	r24, 0x03	; 3
     43e:	01 c0       	rjmp	.+2      	; 0x442 <eMBASCIIInit+0x2c>
    }
    else if( xMBPortTimersInit( MB_ASCII_TIMEOUT_SEC * 20000UL ) != TRUE )
    {
        eStatus = MB_EPORTERR;
     440:	83 e0       	ldi	r24, 0x03	; 3
    }

    EXIT_CRITICAL_SECTION(  );
     442:	78 94       	sei

    return eStatus;
}
     444:	0f 91       	pop	r16
     446:	08 95       	ret

00000448 <eMBASCIIStart>:

void
eMBASCIIStart( void )
{
    ENTER_CRITICAL_SECTION(  );
     448:	f8 94       	cli
    vMBPortSerialEnable( TRUE, FALSE );
     44a:	60 e0       	ldi	r22, 0x00	; 0
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	71 d6       	rcall	.+3298   	; 0x1132 <vMBPortSerialEnable>
    eRcvState = STATE_RX_IDLE;
     450:	10 92 55 03 	sts	0x0355, r1
    EXIT_CRITICAL_SECTION(  );
     454:	78 94       	sei

    /* No special startup required for ASCII. */
    ( void )xMBPortEventPost( EV_READY );
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	57 c6       	rjmp	.+3246   	; 0x1108 <xMBPortEventPost>
     45a:	08 95       	ret

0000045c <eMBASCIIStop>:
}

void
eMBASCIIStop( void )
{
    ENTER_CRITICAL_SECTION(  );
     45c:	f8 94       	cli
    vMBPortSerialEnable( FALSE, FALSE );
     45e:	60 e0       	ldi	r22, 0x00	; 0
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	67 d6       	rcall	.+3278   	; 0x1132 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
     464:	eb d6       	rcall	.+3542   	; 0x123c <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
     466:	78 94       	sei
     468:	08 95       	ret

0000046a <eMBASCIIReceive>:
eMBErrorCode
eMBASCIIReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION(  );
     46a:	f8 94       	cli
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
     46c:	20 91 53 03 	lds	r18, 0x0353
     470:	30 91 54 03 	lds	r19, 0x0354
     474:	23 30       	cpi	r18, 0x03	; 3
     476:	31 05       	cpc	r19, r1
     478:	30 f1       	brcs	.+76     	; 0x4c6 <eMBASCIIReceive+0x5c>
        && ( prvucMBLRC( ( UCHAR * ) ucASCIIBuf, usRcvBufferPos ) == 0 ) )
     47a:	20 91 53 03 	lds	r18, 0x0353
     47e:	30 91 54 03 	lds	r19, 0x0354
static          UCHAR
prvucMBLRC( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucLRC = 0;  /* LRC char initialized */

    while( usLen-- )
     482:	21 15       	cp	r18, r1
     484:	31 05       	cpc	r19, r1
     486:	61 f0       	breq	.+24     	; 0x4a0 <eMBASCIIReceive+0x36>
     488:	ef e8       	ldi	r30, 0x8F	; 143
     48a:	f3 e0       	ldi	r31, 0x03	; 3
     48c:	21 57       	subi	r18, 0x71	; 113
     48e:	3c 4f       	sbci	r19, 0xFC	; 252


static          UCHAR
prvucMBLRC( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucLRC = 0;  /* LRC char initialized */
     490:	a0 e0       	ldi	r26, 0x00	; 0

    while( usLen-- )
    {
        ucLRC += *pucFrame++;   /* Add buffer byte without carry */
     492:	b1 91       	ld	r27, Z+
     494:	ab 0f       	add	r26, r27
static          UCHAR
prvucMBLRC( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucLRC = 0;  /* LRC char initialized */

    while( usLen-- )
     496:	e2 17       	cp	r30, r18
     498:	f3 07       	cpc	r31, r19
     49a:	d9 f7       	brne	.-10     	; 0x492 <eMBASCIIReceive+0x28>
    ENTER_CRITICAL_SECTION(  );
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
        && ( prvucMBLRC( ( UCHAR * ) ucASCIIBuf, usRcvBufferPos ) == 0 ) )
     49c:	a1 11       	cpse	r26, r1
     49e:	15 c0       	rjmp	.+42     	; 0x4ca <eMBASCIIReceive+0x60>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucASCIIBuf[MB_SER_PDU_ADDR_OFF];
     4a0:	20 91 8f 03 	lds	r18, 0x038F
     4a4:	fc 01       	movw	r30, r24
     4a6:	20 83       	st	Z, r18

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_LRC );
     4a8:	80 91 53 03 	lds	r24, 0x0353
     4ac:	90 91 54 03 	lds	r25, 0x0354
     4b0:	02 97       	sbiw	r24, 0x02	; 2
     4b2:	fa 01       	movw	r30, r20
     4b4:	91 83       	std	Z+1, r25	; 0x01
     4b6:	80 83       	st	Z, r24

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucASCIIBuf[MB_SER_PDU_PDU_OFF];
     4b8:	80 e9       	ldi	r24, 0x90	; 144
     4ba:	93 e0       	ldi	r25, 0x03	; 3
     4bc:	fb 01       	movw	r30, r22
     4be:	91 83       	std	Z+1, r25	; 0x01
     4c0:	80 83       	st	Z, r24
}

eMBErrorCode
eMBASCIIReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
     4c2:	80 e0       	ldi	r24, 0x00	; 0
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_LRC );

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucASCIIBuf[MB_SER_PDU_PDU_OFF];
     4c4:	03 c0       	rjmp	.+6      	; 0x4cc <eMBASCIIReceive+0x62>
    }
    else
    {
        eStatus = MB_EIO;
     4c6:	85 e0       	ldi	r24, 0x05	; 5
     4c8:	01 c0       	rjmp	.+2      	; 0x4cc <eMBASCIIReceive+0x62>
     4ca:	85 e0       	ldi	r24, 0x05	; 5
    }
    EXIT_CRITICAL_SECTION(  );
     4cc:	78 94       	sei
    return eStatus;
}
     4ce:	08 95       	ret

000004d0 <eMBASCIISend>:
eMBASCIISend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    UCHAR           usLRC;

    ENTER_CRITICAL_SECTION(  );
     4d0:	f8 94       	cli
    /* Check if the receiver is still in idle state. If not we where too
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
     4d2:	90 91 55 03 	lds	r25, 0x0355
     4d6:	91 11       	cpse	r25, r1
     4d8:	43 c0       	rjmp	.+134    	; 0x560 <eMBASCIISend+0x90>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
     4da:	fb 01       	movw	r30, r22
     4dc:	31 97       	sbiw	r30, 0x01	; 1
     4de:	f0 93 51 03 	sts	0x0351, r31
     4e2:	e0 93 50 03 	sts	0x0350, r30
        usSndBufferCount = 1;
     4e6:	21 e0       	ldi	r18, 0x01	; 1
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	30 93 4f 03 	sts	0x034F, r19
     4ee:	20 93 4e 03 	sts	0x034E, r18

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
     4f2:	80 83       	st	Z, r24
        usSndBufferCount += usLength;
     4f4:	80 91 4e 03 	lds	r24, 0x034E
     4f8:	90 91 4f 03 	lds	r25, 0x034F
     4fc:	48 0f       	add	r20, r24
     4fe:	59 1f       	adc	r21, r25
     500:	50 93 4f 03 	sts	0x034F, r21
     504:	40 93 4e 03 	sts	0x034E, r20

        /* Calculate LRC checksum for Modbus-Serial-Line-PDU. */
        usLRC = prvucMBLRC( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
     508:	80 91 4e 03 	lds	r24, 0x034E
     50c:	90 91 4f 03 	lds	r25, 0x034F
static          UCHAR
prvucMBLRC( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucLRC = 0;  /* LRC char initialized */

    while( usLen-- )
     510:	9c 01       	movw	r18, r24
     512:	21 50       	subi	r18, 0x01	; 1
     514:	31 09       	sbc	r19, r1
     516:	89 2b       	or	r24, r25
     518:	49 f0       	breq	.+18     	; 0x52c <eMBASCIISend+0x5c>
     51a:	62 0f       	add	r22, r18
     51c:	73 1f       	adc	r23, r19


static          UCHAR
prvucMBLRC( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucLRC = 0;  /* LRC char initialized */
     51e:	80 e0       	ldi	r24, 0x00	; 0

    while( usLen-- )
    {
        ucLRC += *pucFrame++;   /* Add buffer byte without carry */
     520:	91 91       	ld	r25, Z+
     522:	89 0f       	add	r24, r25
static          UCHAR
prvucMBLRC( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucLRC = 0;  /* LRC char initialized */

    while( usLen-- )
     524:	e6 17       	cp	r30, r22
     526:	f7 07       	cpc	r31, r23
     528:	d9 f7       	brne	.-10     	; 0x520 <eMBASCIISend+0x50>
     52a:	01 c0       	rjmp	.+2      	; 0x52e <eMBASCIISend+0x5e>


static          UCHAR
prvucMBLRC( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucLRC = 0;  /* LRC char initialized */
     52c:	80 e0       	ldi	r24, 0x00	; 0
    {
        ucLRC += *pucFrame++;   /* Add buffer byte without carry */
    }

    /* Return twos complement */
    ucLRC = ( UCHAR ) ( -( ( CHAR ) ucLRC ) );
     52e:	48 2f       	mov	r20, r24
     530:	41 95       	neg	r20
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
        usSndBufferCount += usLength;

        /* Calculate LRC checksum for Modbus-Serial-Line-PDU. */
        usLRC = prvucMBLRC( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
        ucASCIIBuf[usSndBufferCount++] = usLRC;
     532:	80 91 4e 03 	lds	r24, 0x034E
     536:	90 91 4f 03 	lds	r25, 0x034F
     53a:	9c 01       	movw	r18, r24
     53c:	2f 5f       	subi	r18, 0xFF	; 255
     53e:	3f 4f       	sbci	r19, 0xFF	; 255
     540:	30 93 4f 03 	sts	0x034F, r19
     544:	20 93 4e 03 	sts	0x034E, r18
     548:	fc 01       	movw	r30, r24
     54a:	e1 57       	subi	r30, 0x71	; 113
     54c:	fc 4f       	sbci	r31, 0xFC	; 252
     54e:	40 83       	st	Z, r20

        /* Activate the transmitter. */
        eSndState = STATE_TX_START;
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	80 93 56 03 	sts	0x0356, r24
        vMBPortSerialEnable( FALSE, TRUE );
     556:	61 e0       	ldi	r22, 0x01	; 1
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	eb d5       	rcall	.+3030   	; 0x1132 <vMBPortSerialEnable>
}

eMBErrorCode
eMBASCIISend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	01 c0       	rjmp	.+2      	; 0x562 <eMBASCIISend+0x92>
        eSndState = STATE_TX_START;
        vMBPortSerialEnable( FALSE, TRUE );
    }
    else
    {
        eStatus = MB_EIO;
     560:	85 e0       	ldi	r24, 0x05	; 5
    }
    EXIT_CRITICAL_SECTION(  );
     562:	78 94       	sei
    return eStatus;
}
     564:	08 95       	ret

00000566 <xMBASCIIReceiveFSM>:

BOOL
xMBASCIIReceiveFSM( void )
{
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	1f 92       	push	r1
     56c:	cd b7       	in	r28, 0x3d	; 61
     56e:	de b7       	in	r29, 0x3e	; 62
    UCHAR           ucByte;
    UCHAR           ucResult;

    assert( eSndState == STATE_TX_IDLE );

    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
     570:	ce 01       	movw	r24, r28
     572:	01 96       	adiw	r24, 0x01	; 1
     574:	2d d6       	rcall	.+3162   	; 0x11d0 <xMBPortSerialGetByte>
    switch ( eRcvState )
     576:	80 91 55 03 	lds	r24, 0x0355
     57a:	81 30       	cpi	r24, 0x01	; 1
     57c:	31 f0       	breq	.+12     	; 0x58a <xMBASCIIReceiveFSM+0x24>
     57e:	08 f4       	brcc	.+2      	; 0x582 <xMBASCIIReceiveFSM+0x1c>
     580:	7a c0       	rjmp	.+244    	; 0x676 <xMBASCIIReceiveFSM+0x110>
     582:	82 30       	cpi	r24, 0x02	; 2
     584:	09 f4       	brne	.+2      	; 0x588 <xMBASCIIReceiveFSM+0x22>
     586:	5a c0       	rjmp	.+180    	; 0x63c <xMBASCIIReceiveFSM+0xd6>
     588:	85 c0       	rjmp	.+266    	; 0x694 <xMBASCIIReceiveFSM+0x12e>
         * block. Other characters are part of the data block and their
         * ASCII value is converted back to a binary representation.
         */
    case STATE_RX_RCV:
        /* Enable timer for character timeout. */
        vMBPortTimersEnable(  );
     58a:	43 d6       	rcall	.+3206   	; 0x1212 <vMBPortTimersEnable>
        if( ucByte == ':' )
     58c:	89 81       	ldd	r24, Y+1	; 0x01
     58e:	8a 33       	cpi	r24, 0x3A	; 58
     590:	41 f4       	brne	.+16     	; 0x5a2 <xMBASCIIReceiveFSM+0x3c>
        {
            /* Empty receive buffer. */
            eBytePos = BYTE_HIGH_NIBBLE;
     592:	10 92 52 03 	sts	0x0352, r1
            usRcvBufferPos = 0;
     596:	10 92 54 03 	sts	0x0354, r1
     59a:	10 92 53 03 	sts	0x0353, r1
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	7e c0       	rjmp	.+252    	; 0x69e <xMBASCIIReceiveFSM+0x138>
        {
            /* Empty receive buffer. */
            eBytePos = BYTE_HIGH_NIBBLE;
            usRcvBufferPos = 0;
        }
        else if( ucByte == MB_ASCII_DEFAULT_CR )
     5a2:	8d 30       	cpi	r24, 0x0D	; 13
     5a4:	29 f4       	brne	.+10     	; 0x5b0 <xMBASCIIReceiveFSM+0x4a>
        {
            eRcvState = STATE_RX_WAIT_EOF;
     5a6:	82 e0       	ldi	r24, 0x02	; 2
     5a8:	80 93 55 03 	sts	0x0355, r24
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	77 c0       	rjmp	.+238    	; 0x69e <xMBASCIIReceiveFSM+0x138>


static          UCHAR
prvucMBCHAR2BIN( UCHAR ucCharacter )
{
    if( ( ucCharacter >= '0' ) && ( ucCharacter <= '9' ) )
     5b0:	90 ed       	ldi	r25, 0xD0	; 208
     5b2:	98 0f       	add	r25, r24
     5b4:	9a 30       	cpi	r25, 0x0A	; 10
     5b6:	38 f0       	brcs	.+14     	; 0x5c6 <xMBASCIIReceiveFSM+0x60>
    {
        return ( UCHAR )( ucCharacter - '0' );
    }
    else if( ( ucCharacter >= 'A' ) && ( ucCharacter <= 'F' ) )
     5b8:	9f eb       	ldi	r25, 0xBF	; 191
     5ba:	98 0f       	add	r25, r24
     5bc:	96 30       	cpi	r25, 0x06	; 6
     5be:	28 f4       	brcc	.+10     	; 0x5ca <xMBASCIIReceiveFSM+0x64>
    {
        return ( UCHAR )( ucCharacter - 'A' + 0x0A );
     5c0:	29 ec       	ldi	r18, 0xC9	; 201
     5c2:	28 0f       	add	r18, r24
     5c4:	03 c0       	rjmp	.+6      	; 0x5cc <xMBASCIIReceiveFSM+0x66>
static          UCHAR
prvucMBCHAR2BIN( UCHAR ucCharacter )
{
    if( ( ucCharacter >= '0' ) && ( ucCharacter <= '9' ) )
    {
        return ( UCHAR )( ucCharacter - '0' );
     5c6:	29 2f       	mov	r18, r25
     5c8:	01 c0       	rjmp	.+2      	; 0x5cc <xMBASCIIReceiveFSM+0x66>
    {
        return ( UCHAR )( ucCharacter - 'A' + 0x0A );
    }
    else
    {
        return 0xFF;
     5ca:	2f ef       	ldi	r18, 0xFF	; 255
            eRcvState = STATE_RX_WAIT_EOF;
        }
        else
        {
            ucResult = prvucMBCHAR2BIN( ucByte );
            switch ( eBytePos )
     5cc:	90 91 52 03 	lds	r25, 0x0352
     5d0:	99 23       	and	r25, r25
     5d2:	19 f0       	breq	.+6      	; 0x5da <xMBASCIIReceiveFSM+0x74>
     5d4:	91 30       	cpi	r25, 0x01	; 1
     5d6:	e1 f0       	breq	.+56     	; 0x610 <xMBASCIIReceiveFSM+0xaa>
     5d8:	5f c0       	rjmp	.+190    	; 0x698 <xMBASCIIReceiveFSM+0x132>
            {
                /* High nibble of the byte comes first. We check for
                 * a buffer overflow here. */
            case BYTE_HIGH_NIBBLE:
                if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
     5da:	80 91 53 03 	lds	r24, 0x0353
     5de:	90 91 54 03 	lds	r25, 0x0354
     5e2:	8f 3f       	cpi	r24, 0xFF	; 255
     5e4:	91 05       	cpc	r25, r1
     5e6:	09 f0       	breq	.+2      	; 0x5ea <xMBASCIIReceiveFSM+0x84>
     5e8:	70 f4       	brcc	.+28     	; 0x606 <xMBASCIIReceiveFSM+0xa0>
                {
                    ucASCIIBuf[usRcvBufferPos] = ( UCHAR )( ucResult << 4 );
     5ea:	e0 91 53 03 	lds	r30, 0x0353
     5ee:	f0 91 54 03 	lds	r31, 0x0354
     5f2:	e1 57       	subi	r30, 0x71	; 113
     5f4:	fc 4f       	sbci	r31, 0xFC	; 252
     5f6:	22 95       	swap	r18
     5f8:	20 7f       	andi	r18, 0xF0	; 240
     5fa:	20 83       	st	Z, r18
                    eBytePos = BYTE_LOW_NIBBLE;
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	80 93 52 03 	sts	0x0352, r24
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     602:	80 e0       	ldi	r24, 0x00	; 0
            case BYTE_HIGH_NIBBLE:
                if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
                {
                    ucASCIIBuf[usRcvBufferPos] = ( UCHAR )( ucResult << 4 );
                    eBytePos = BYTE_LOW_NIBBLE;
                    break;
     604:	4c c0       	rjmp	.+152    	; 0x69e <xMBASCIIReceiveFSM+0x138>
                }
                else
                {
                    /* not handled in Modbus specification but seems
                     * a resonable implementation. */
                    eRcvState = STATE_RX_IDLE;
     606:	10 92 55 03 	sts	0x0355, r1
                    /* Disable previously activated timer because of error state. */
                    vMBPortTimersDisable(  );
     60a:	18 d6       	rcall	.+3120   	; 0x123c <vMBPortTimersDisable>
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     60c:	80 e0       	ldi	r24, 0x00	; 0
                     * a resonable implementation. */
                    eRcvState = STATE_RX_IDLE;
                    /* Disable previously activated timer because of error state. */
                    vMBPortTimersDisable(  );
                }
                break;
     60e:	47 c0       	rjmp	.+142    	; 0x69e <xMBASCIIReceiveFSM+0x138>

            case BYTE_LOW_NIBBLE:
                ucASCIIBuf[usRcvBufferPos] |= ucResult;
     610:	e0 91 53 03 	lds	r30, 0x0353
     614:	f0 91 54 03 	lds	r31, 0x0354
     618:	e1 57       	subi	r30, 0x71	; 113
     61a:	fc 4f       	sbci	r31, 0xFC	; 252
     61c:	80 81       	ld	r24, Z
     61e:	28 2b       	or	r18, r24
     620:	20 83       	st	Z, r18
                usRcvBufferPos++;
     622:	80 91 53 03 	lds	r24, 0x0353
     626:	90 91 54 03 	lds	r25, 0x0354
     62a:	01 96       	adiw	r24, 0x01	; 1
     62c:	90 93 54 03 	sts	0x0354, r25
     630:	80 93 53 03 	sts	0x0353, r24
                eBytePos = BYTE_HIGH_NIBBLE;
     634:	10 92 52 03 	sts	0x0352, r1
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     638:	80 e0       	ldi	r24, 0x00	; 0

            case BYTE_LOW_NIBBLE:
                ucASCIIBuf[usRcvBufferPos] |= ucResult;
                usRcvBufferPos++;
                eBytePos = BYTE_HIGH_NIBBLE;
                break;
     63a:	31 c0       	rjmp	.+98     	; 0x69e <xMBASCIIReceiveFSM+0x138>
            }
        }
        break;

    case STATE_RX_WAIT_EOF:
        if( ucByte == ucMBLFCharacter )
     63c:	89 81       	ldd	r24, Y+1	; 0x01
     63e:	90 91 4d 03 	lds	r25, 0x034D
     642:	89 13       	cpse	r24, r25
     644:	06 c0       	rjmp	.+12     	; 0x652 <xMBASCIIReceiveFSM+0xec>
        {
            /* Disable character timeout timer because all characters are
             * received. */
            vMBPortTimersDisable(  );
     646:	fa d5       	rcall	.+3060   	; 0x123c <vMBPortTimersDisable>
            /* Receiver is again in idle state. */
            eRcvState = STATE_RX_IDLE;
     648:	10 92 55 03 	sts	0x0355, r1

            /* Notify the caller of eMBASCIIReceive that a new frame
             * was received. */
            xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	5c d5       	rcall	.+2744   	; 0x1108 <xMBPortEventPost>
     650:	26 c0       	rjmp	.+76     	; 0x69e <xMBASCIIReceiveFSM+0x138>
        }
        else if( ucByte == ':' )
     652:	8a 33       	cpi	r24, 0x3A	; 58
     654:	61 f4       	brne	.+24     	; 0x66e <xMBASCIIReceiveFSM+0x108>
        {
            /* Empty receive buffer and back to receive state. */
            eBytePos = BYTE_HIGH_NIBBLE;
     656:	10 92 52 03 	sts	0x0352, r1
            usRcvBufferPos = 0;
     65a:	10 92 54 03 	sts	0x0354, r1
     65e:	10 92 53 03 	sts	0x0353, r1
            eRcvState = STATE_RX_RCV;
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	80 93 55 03 	sts	0x0355, r24

            /* Enable timer for character timeout. */
            vMBPortTimersEnable(  );
     668:	d4 d5       	rcall	.+2984   	; 0x1212 <vMBPortTimersEnable>
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	18 c0       	rjmp	.+48     	; 0x69e <xMBASCIIReceiveFSM+0x138>
            vMBPortTimersEnable(  );
        }
        else
        {
            /* Frame is not okay. Delete entire frame. */
            eRcvState = STATE_RX_IDLE;
     66e:	10 92 55 03 	sts	0x0355, r1
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	14 c0       	rjmp	.+40     	; 0x69e <xMBASCIIReceiveFSM+0x138>
            eRcvState = STATE_RX_IDLE;
        }
        break;

    case STATE_RX_IDLE:
        if( ucByte == ':' )
     676:	89 81       	ldd	r24, Y+1	; 0x01
     678:	8a 33       	cpi	r24, 0x3A	; 58
     67a:	81 f4       	brne	.+32     	; 0x69c <xMBASCIIReceiveFSM+0x136>
        {
            /* Enable timer for character timeout. */
            vMBPortTimersEnable(  );
     67c:	ca d5       	rcall	.+2964   	; 0x1212 <vMBPortTimersEnable>
            /* Reset the input buffers to store the frame. */
            usRcvBufferPos = 0;;
     67e:	10 92 54 03 	sts	0x0354, r1
     682:	10 92 53 03 	sts	0x0353, r1
            eBytePos = BYTE_HIGH_NIBBLE;
     686:	10 92 52 03 	sts	0x0352, r1
            eRcvState = STATE_RX_RCV;
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	80 93 55 03 	sts	0x0355, r24
}

BOOL
xMBASCIIReceiveFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	05 c0       	rjmp	.+10     	; 0x69e <xMBASCIIReceiveFSM+0x138>
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	03 c0       	rjmp	.+6      	; 0x69e <xMBASCIIReceiveFSM+0x138>
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	01 c0       	rjmp	.+2      	; 0x69e <xMBASCIIReceiveFSM+0x138>
     69c:	80 e0       	ldi	r24, 0x00	; 0
        }
        break;
    }

    return xNeedPoll;
}
     69e:	0f 90       	pop	r0
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	08 95       	ret

000006a6 <xMBASCIITransmitFSM>:

BOOL
xMBASCIITransmitFSM( void )
{
     6a6:	cf 93       	push	r28
    BOOL            xNeedPoll = FALSE;
    UCHAR           ucByte;

    assert( eRcvState == STATE_RX_IDLE );
    switch ( eSndState )
     6a8:	80 91 56 03 	lds	r24, 0x0356
     6ac:	82 30       	cpi	r24, 0x02	; 2
     6ae:	b9 f0       	breq	.+46     	; 0x6de <xMBASCIITransmitFSM+0x38>
     6b0:	30 f4       	brcc	.+12     	; 0x6be <xMBASCIITransmitFSM+0x18>
     6b2:	88 23       	and	r24, r24
     6b4:	09 f4       	brne	.+2      	; 0x6b8 <xMBASCIITransmitFSM+0x12>
     6b6:	7b c0       	rjmp	.+246    	; 0x7ae <xMBASCIITransmitFSM+0x108>
     6b8:	81 30       	cpi	r24, 0x01	; 1
     6ba:	41 f0       	breq	.+16     	; 0x6cc <xMBASCIITransmitFSM+0x26>
     6bc:	7d c0       	rjmp	.+250    	; 0x7b8 <xMBASCIITransmitFSM+0x112>
     6be:	83 30       	cpi	r24, 0x03	; 3
     6c0:	09 f4       	brne	.+2      	; 0x6c4 <xMBASCIITransmitFSM+0x1e>
     6c2:	62 c0       	rjmp	.+196    	; 0x788 <xMBASCIITransmitFSM+0xe2>
     6c4:	84 30       	cpi	r24, 0x04	; 4
     6c6:	09 f4       	brne	.+2      	; 0x6ca <xMBASCIITransmitFSM+0x24>
     6c8:	67 c0       	rjmp	.+206    	; 0x798 <xMBASCIITransmitFSM+0xf2>
     6ca:	76 c0       	rjmp	.+236    	; 0x7b8 <xMBASCIITransmitFSM+0x112>
    {
        /* Start of transmission. The start of a frame is defined by sending
         * the character ':'. */
    case STATE_TX_START:
        ucByte = ':';
        xMBPortSerialPutByte( ( CHAR )ucByte );
     6cc:	8a e3       	ldi	r24, 0x3A	; 58
     6ce:	7d d5       	rcall	.+2810   	; 0x11ca <xMBPortSerialPutByte>
        eSndState = STATE_TX_DATA;
     6d0:	82 e0       	ldi	r24, 0x02	; 2
     6d2:	80 93 56 03 	sts	0x0356, r24
        eBytePos = BYTE_HIGH_NIBBLE;
     6d6:	10 92 52 03 	sts	0x0352, r1
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     6da:	c0 e0       	ldi	r28, 0x00	; 0
    case STATE_TX_START:
        ucByte = ':';
        xMBPortSerialPutByte( ( CHAR )ucByte );
        eSndState = STATE_TX_DATA;
        eBytePos = BYTE_HIGH_NIBBLE;
        break;
     6dc:	70 c0       	rjmp	.+224    	; 0x7be <xMBASCIITransmitFSM+0x118>
        /* Send the data block. Each data byte is encoded as a character hex
         * stream with the high nibble sent first and the low nibble sent
         * last. If all data bytes are exhausted we send a '\r' character
         * to end the transmission. */
    case STATE_TX_DATA:
        if( usSndBufferCount > 0 )
     6de:	80 91 4e 03 	lds	r24, 0x034E
     6e2:	90 91 4f 03 	lds	r25, 0x034F
     6e6:	89 2b       	or	r24, r25
     6e8:	09 f4       	brne	.+2      	; 0x6ec <xMBASCIITransmitFSM+0x46>
     6ea:	47 c0       	rjmp	.+142    	; 0x77a <xMBASCIITransmitFSM+0xd4>
        {
            switch ( eBytePos )
     6ec:	80 91 52 03 	lds	r24, 0x0352
     6f0:	88 23       	and	r24, r24
     6f2:	19 f0       	breq	.+6      	; 0x6fa <xMBASCIITransmitFSM+0x54>
     6f4:	81 30       	cpi	r24, 0x01	; 1
     6f6:	c9 f0       	breq	.+50     	; 0x72a <xMBASCIITransmitFSM+0x84>
     6f8:	61 c0       	rjmp	.+194    	; 0x7bc <xMBASCIITransmitFSM+0x116>
            {
            case BYTE_HIGH_NIBBLE:
                ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur >> 4 ) );
     6fa:	e0 91 50 03 	lds	r30, 0x0350
     6fe:	f0 91 51 03 	lds	r31, 0x0351
     702:	80 81       	ld	r24, Z
     704:	82 95       	swap	r24
     706:	8f 70       	andi	r24, 0x0F	; 15
}

static          UCHAR
prvucMBBIN2CHAR( UCHAR ucByte )
{
    if( ucByte <= 0x09 )
     708:	8a 30       	cpi	r24, 0x0A	; 10
     70a:	10 f4       	brcc	.+4      	; 0x710 <xMBASCIITransmitFSM+0x6a>
    {
        return ( UCHAR )( '0' + ucByte );
     70c:	80 5d       	subi	r24, 0xD0	; 208
     70e:	07 c0       	rjmp	.+14     	; 0x71e <xMBASCIITransmitFSM+0x78>
    }
    else if( ( ucByte >= 0x0A ) && ( ucByte <= 0x0F ) )
     710:	96 ef       	ldi	r25, 0xF6	; 246
     712:	98 0f       	add	r25, r24
     714:	96 30       	cpi	r25, 0x06	; 6
     716:	10 f4       	brcc	.+4      	; 0x71c <xMBASCIITransmitFSM+0x76>
    {
        return ( UCHAR )( ucByte - 0x0A + 'A' );
     718:	89 5c       	subi	r24, 0xC9	; 201
     71a:	01 c0       	rjmp	.+2      	; 0x71e <xMBASCIITransmitFSM+0x78>
    else
    {
        /* Programming error. */
        assert( 0 );
    }
    return '0';
     71c:	80 e3       	ldi	r24, 0x30	; 48
        {
            switch ( eBytePos )
            {
            case BYTE_HIGH_NIBBLE:
                ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur >> 4 ) );
                xMBPortSerialPutByte( ( CHAR ) ucByte );
     71e:	55 d5       	rcall	.+2730   	; 0x11ca <xMBPortSerialPutByte>
                eBytePos = BYTE_LOW_NIBBLE;
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	80 93 52 03 	sts	0x0352, r24
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     726:	c0 e0       	ldi	r28, 0x00	; 0
            {
            case BYTE_HIGH_NIBBLE:
                ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur >> 4 ) );
                xMBPortSerialPutByte( ( CHAR ) ucByte );
                eBytePos = BYTE_LOW_NIBBLE;
                break;
     728:	4a c0       	rjmp	.+148    	; 0x7be <xMBASCIITransmitFSM+0x118>

            case BYTE_LOW_NIBBLE:
                ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur & 0x0F ) );
     72a:	e0 91 50 03 	lds	r30, 0x0350
     72e:	f0 91 51 03 	lds	r31, 0x0351
     732:	80 81       	ld	r24, Z
     734:	8f 70       	andi	r24, 0x0F	; 15
}

static          UCHAR
prvucMBBIN2CHAR( UCHAR ucByte )
{
    if( ucByte <= 0x09 )
     736:	8a 30       	cpi	r24, 0x0A	; 10
     738:	10 f4       	brcc	.+4      	; 0x73e <xMBASCIITransmitFSM+0x98>
    {
        return ( UCHAR )( '0' + ucByte );
     73a:	80 5d       	subi	r24, 0xD0	; 208
     73c:	07 c0       	rjmp	.+14     	; 0x74c <xMBASCIITransmitFSM+0xa6>
    }
    else if( ( ucByte >= 0x0A ) && ( ucByte <= 0x0F ) )
     73e:	96 ef       	ldi	r25, 0xF6	; 246
     740:	98 0f       	add	r25, r24
     742:	96 30       	cpi	r25, 0x06	; 6
     744:	10 f4       	brcc	.+4      	; 0x74a <xMBASCIITransmitFSM+0xa4>
    {
        return ( UCHAR )( ucByte - 0x0A + 'A' );
     746:	89 5c       	subi	r24, 0xC9	; 201
     748:	01 c0       	rjmp	.+2      	; 0x74c <xMBASCIITransmitFSM+0xa6>
    else
    {
        /* Programming error. */
        assert( 0 );
    }
    return '0';
     74a:	80 e3       	ldi	r24, 0x30	; 48
                eBytePos = BYTE_LOW_NIBBLE;
                break;

            case BYTE_LOW_NIBBLE:
                ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur & 0x0F ) );
                xMBPortSerialPutByte( ( CHAR )ucByte );
     74c:	3e d5       	rcall	.+2684   	; 0x11ca <xMBPortSerialPutByte>
                pucSndBufferCur++;
     74e:	80 91 50 03 	lds	r24, 0x0350
     752:	90 91 51 03 	lds	r25, 0x0351
     756:	01 96       	adiw	r24, 0x01	; 1
     758:	90 93 51 03 	sts	0x0351, r25
     75c:	80 93 50 03 	sts	0x0350, r24
                eBytePos = BYTE_HIGH_NIBBLE;
     760:	10 92 52 03 	sts	0x0352, r1
                usSndBufferCount--;
     764:	80 91 4e 03 	lds	r24, 0x034E
     768:	90 91 4f 03 	lds	r25, 0x034F
     76c:	01 97       	sbiw	r24, 0x01	; 1
     76e:	90 93 4f 03 	sts	0x034F, r25
     772:	80 93 4e 03 	sts	0x034E, r24
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     776:	c0 e0       	ldi	r28, 0x00	; 0
                ucByte = prvucMBBIN2CHAR( ( UCHAR )( *pucSndBufferCur & 0x0F ) );
                xMBPortSerialPutByte( ( CHAR )ucByte );
                pucSndBufferCur++;
                eBytePos = BYTE_HIGH_NIBBLE;
                usSndBufferCount--;
                break;
     778:	22 c0       	rjmp	.+68     	; 0x7be <xMBASCIITransmitFSM+0x118>
            }
        }
        else
        {
            xMBPortSerialPutByte( MB_ASCII_DEFAULT_CR );
     77a:	8d e0       	ldi	r24, 0x0D	; 13
     77c:	26 d5       	rcall	.+2636   	; 0x11ca <xMBPortSerialPutByte>
            eSndState = STATE_TX_END;
     77e:	83 e0       	ldi	r24, 0x03	; 3
     780:	80 93 56 03 	sts	0x0356, r24
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     784:	c0 e0       	ldi	r28, 0x00	; 0
     786:	1b c0       	rjmp	.+54     	; 0x7be <xMBASCIITransmitFSM+0x118>
        }
        break;

        /* Finish the frame by sending a LF character. */
    case STATE_TX_END:
        xMBPortSerialPutByte( ( CHAR )ucMBLFCharacter );
     788:	80 91 4d 03 	lds	r24, 0x034D
     78c:	1e d5       	rcall	.+2620   	; 0x11ca <xMBPortSerialPutByte>
        /* We need another state to make sure that the CR character has
         * been sent. */
        eSndState = STATE_TX_NOTIFY;
     78e:	84 e0       	ldi	r24, 0x04	; 4
     790:	80 93 56 03 	sts	0x0356, r24
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     794:	c0 e0       	ldi	r28, 0x00	; 0
    case STATE_TX_END:
        xMBPortSerialPutByte( ( CHAR )ucMBLFCharacter );
        /* We need another state to make sure that the CR character has
         * been sent. */
        eSndState = STATE_TX_NOTIFY;
        break;
     796:	13 c0       	rjmp	.+38     	; 0x7be <xMBASCIITransmitFSM+0x118>

        /* Notify the task which called eMBASCIISend that the frame has
         * been sent. */
    case STATE_TX_NOTIFY:
        eSndState = STATE_TX_IDLE;
     798:	10 92 56 03 	sts	0x0356, r1
        xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
     79c:	83 e0       	ldi	r24, 0x03	; 3
     79e:	b4 d4       	rcall	.+2408   	; 0x1108 <xMBPortEventPost>
     7a0:	c8 2f       	mov	r28, r24

        /* Disable transmitter. This prevents another transmit buffer
         * empty interrupt. */
        vMBPortSerialEnable( TRUE, FALSE );
     7a2:	60 e0       	ldi	r22, 0x00	; 0
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	c5 d4       	rcall	.+2442   	; 0x1132 <vMBPortSerialEnable>
        eSndState = STATE_TX_IDLE;
     7a8:	10 92 56 03 	sts	0x0356, r1
        break;
     7ac:	08 c0       	rjmp	.+16     	; 0x7be <xMBASCIITransmitFSM+0x118>

        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
     7ae:	60 e0       	ldi	r22, 0x00	; 0
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	bf d4       	rcall	.+2430   	; 0x1132 <vMBPortSerialEnable>
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     7b4:	c0 e0       	ldi	r28, 0x00	; 0
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
        break;
     7b6:	03 c0       	rjmp	.+6      	; 0x7be <xMBASCIITransmitFSM+0x118>
}

BOOL
xMBASCIITransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     7b8:	c0 e0       	ldi	r28, 0x00	; 0
     7ba:	01 c0       	rjmp	.+2      	; 0x7be <xMBASCIITransmitFSM+0x118>
     7bc:	c0 e0       	ldi	r28, 0x00	; 0
        vMBPortSerialEnable( TRUE, FALSE );
        break;
    }

    return xNeedPoll;
}
     7be:	8c 2f       	mov	r24, r28
     7c0:	cf 91       	pop	r28
     7c2:	08 95       	ret

000007c4 <xMBASCIITimerT1SExpired>:

BOOL
xMBASCIITimerT1SExpired( void )
{
    switch ( eRcvState )
     7c4:	80 91 55 03 	lds	r24, 0x0355
     7c8:	81 50       	subi	r24, 0x01	; 1
     7ca:	82 30       	cpi	r24, 0x02	; 2
     7cc:	10 f4       	brcc	.+4      	; 0x7d2 <xMBASCIITimerT1SExpired+0xe>
        /* If we have a timeout we go back to the idle state and wait for
         * the next frame.
         */
    case STATE_RX_RCV:
    case STATE_RX_WAIT_EOF:
        eRcvState = STATE_RX_IDLE;
     7ce:	10 92 55 03 	sts	0x0355, r1

    default:
        assert( ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_WAIT_EOF ) );
        break;
    }
    vMBPortTimersDisable(  );
     7d2:	34 d5       	rcall	.+2664   	; 0x123c <vMBPortTimersDisable>

    /* no context switch required. */
    return FALSE;
}
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	08 95       	ret

000007d8 <usMBCRC16>:
{
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
    int             iIndex;

    while( usLen-- )
     7d8:	61 15       	cp	r22, r1
     7da:	71 05       	cpc	r23, r1
     7dc:	b1 f0       	breq	.+44     	; 0x80a <usMBCRC16+0x32>
     7de:	fc 01       	movw	r30, r24
     7e0:	68 0f       	add	r22, r24
     7e2:	79 1f       	adc	r23, r25

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
     7e4:	8f ef       	ldi	r24, 0xFF	; 255
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucCRCHi = 0xFF;
     7e6:	4f ef       	ldi	r20, 0xFF	; 255
    UCHAR           ucCRCLo = 0xFF;
    int             iIndex;

    while( usLen-- )
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
     7e8:	21 91       	ld	r18, Z+
     7ea:	82 27       	eor	r24, r18
     7ec:	28 2f       	mov	r18, r24
     7ee:	30 e0       	ldi	r19, 0x00	; 0
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
     7f0:	d9 01       	movw	r26, r18
     7f2:	af 5c       	subi	r26, 0xCF	; 207
     7f4:	bd 4f       	sbci	r27, 0xFD	; 253
     7f6:	8c 91       	ld	r24, X
     7f8:	84 27       	eor	r24, r20
        ucCRCHi = aucCRCLo[iIndex];
     7fa:	d9 01       	movw	r26, r18
     7fc:	af 5c       	subi	r26, 0xCF	; 207
     7fe:	be 4f       	sbci	r27, 0xFE	; 254
     800:	4c 91       	ld	r20, X
{
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
    int             iIndex;

    while( usLen-- )
     802:	e6 17       	cp	r30, r22
     804:	f7 07       	cpc	r31, r23
     806:	81 f7       	brne	.-32     	; 0x7e8 <usMBCRC16+0x10>
     808:	02 c0       	rjmp	.+4      	; 0x80e <usMBCRC16+0x36>

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
     80a:	8f ef       	ldi	r24, 0xFF	; 255
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucCRCHi = 0xFF;
     80c:	4f ef       	ldi	r20, 0xFF	; 255
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
        ucCRCHi = aucCRCLo[iIndex];
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
     80e:	90 e0       	ldi	r25, 0x00	; 0
}
     810:	94 2b       	or	r25, r20
     812:	08 95       	ret

00000814 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
     814:	1f 93       	push	r17
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	eb 01       	movw	r28, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
     81c:	28 81       	ld	r18, Y
     81e:	39 81       	ldd	r19, Y+1	; 0x01
     820:	25 30       	cpi	r18, 0x05	; 5
     822:	31 05       	cpc	r19, r1
     824:	09 f0       	breq	.+2      	; 0x828 <eMBFuncReadCoils+0x14>
     826:	55 c0       	rjmp	.+170    	; 0x8d2 <eMBFuncReadCoils+0xbe>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     828:	dc 01       	movw	r26, r24
     82a:	11 96       	adiw	r26, 0x01	; 1
     82c:	ec 91       	ld	r30, X
     82e:	11 97       	sbiw	r26, 0x01	; 1
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     830:	12 96       	adiw	r26, 0x02	; 2
     832:	6c 91       	ld	r22, X
     834:	12 97       	sbiw	r26, 0x02	; 2
        usRegAddress++;

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
     836:	13 96       	adiw	r26, 0x03	; 3
     838:	4c 91       	ld	r20, X
     83a:	13 97       	sbiw	r26, 0x03	; 3
     83c:	50 e0       	ldi	r21, 0x00	; 0
     83e:	54 2f       	mov	r21, r20
     840:	44 27       	eor	r20, r20
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
     842:	14 96       	adiw	r26, 0x04	; 4
     844:	2c 91       	ld	r18, X
     846:	42 2b       	or	r20, r18

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
     848:	9a 01       	movw	r18, r20
     84a:	21 50       	subi	r18, 0x01	; 1
     84c:	31 09       	sbc	r19, r1
     84e:	2f 3c       	cpi	r18, 0xCF	; 207
     850:	37 40       	sbci	r19, 0x07	; 7
     852:	08 f0       	brcs	.+2      	; 0x856 <eMBFuncReadCoils+0x42>
     854:	40 c0       	rjmp	.+128    	; 0x8d6 <eMBFuncReadCoils+0xc2>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
     856:	19 82       	std	Y+1, r1	; 0x01
     858:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
     85a:	21 e0       	ldi	r18, 0x01	; 1
     85c:	dc 01       	movw	r26, r24
     85e:	2c 93       	st	X, r18
            *usLen += 1;
     860:	28 81       	ld	r18, Y
     862:	39 81       	ldd	r19, Y+1	; 0x01
     864:	2f 5f       	subi	r18, 0xFF	; 255
     866:	3f 4f       	sbci	r19, 0xFF	; 255
     868:	39 83       	std	Y+1, r19	; 0x01
     86a:	28 83       	st	Y, r18

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
     86c:	9a 01       	movw	r18, r20
     86e:	27 70       	andi	r18, 0x07	; 7
     870:	33 27       	eor	r19, r19
     872:	23 2b       	or	r18, r19
     874:	51 f0       	breq	.+20     	; 0x88a <eMBFuncReadCoils+0x76>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
     876:	9a 01       	movw	r18, r20
     878:	36 95       	lsr	r19
     87a:	27 95       	ror	r18
     87c:	36 95       	lsr	r19
     87e:	27 95       	ror	r18
     880:	36 95       	lsr	r19
     882:	27 95       	ror	r18
     884:	11 e0       	ldi	r17, 0x01	; 1
     886:	12 0f       	add	r17, r18
     888:	08 c0       	rjmp	.+16     	; 0x89a <eMBFuncReadCoils+0x86>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
     88a:	9a 01       	movw	r18, r20
     88c:	36 95       	lsr	r19
     88e:	27 95       	ror	r18
     890:	36 95       	lsr	r19
     892:	27 95       	ror	r18
     894:	36 95       	lsr	r19
     896:	27 95       	ror	r18
     898:	12 2f       	mov	r17, r18
            }
            *pucFrameCur++ = ucNBytes;
     89a:	dc 01       	movw	r26, r24
     89c:	11 96       	adiw	r26, 0x01	; 1
     89e:	1c 93       	st	X, r17
            *usLen += 1;
     8a0:	28 81       	ld	r18, Y
     8a2:	39 81       	ldd	r19, Y+1	; 0x01
     8a4:	2f 5f       	subi	r18, 0xFF	; 255
     8a6:	3f 4f       	sbci	r19, 0xFF	; 255
     8a8:	39 83       	std	Y+1, r19	; 0x01
     8aa:	28 83       	st	Y, r18
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     8ac:	70 e0       	ldi	r23, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     8ae:	7e 2b       	or	r23, r30
        usRegAddress++;
     8b0:	6f 5f       	subi	r22, 0xFF	; 255
     8b2:	7f 4f       	sbci	r23, 0xFF	; 255
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
            }
            *pucFrameCur++ = ucNBytes;
            *usLen += 1;

            eRegStatus =
     8b4:	20 e0       	ldi	r18, 0x00	; 0
     8b6:	02 96       	adiw	r24, 0x02	; 2
     8b8:	5f dc       	rcall	.-1858   	; 0x178 <eMBRegCoilsCB>
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
     8ba:	88 23       	and	r24, r24
     8bc:	11 f0       	breq	.+4      	; 0x8c2 <eMBFuncReadCoils+0xae>
            {
                eStatus = prveMBError2Exception( eRegStatus );
     8be:	12 d4       	rcall	.+2084   	; 0x10e4 <prveMBError2Exception>
     8c0:	0b c0       	rjmp	.+22     	; 0x8d8 <eMBFuncReadCoils+0xc4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
     8c2:	88 81       	ld	r24, Y
     8c4:	99 81       	ldd	r25, Y+1	; 0x01
     8c6:	81 0f       	add	r24, r17
     8c8:	91 1d       	adc	r25, r1
     8ca:	99 83       	std	Y+1, r25	; 0x01
     8cc:	88 83       	st	Y, r24
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	03 c0       	rjmp	.+6      	; 0x8d8 <eMBFuncReadCoils+0xc4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     8d2:	83 e0       	ldi	r24, 0x03	; 3
     8d4:	01 c0       	rjmp	.+2      	; 0x8d8 <eMBFuncReadCoils+0xc4>
                *usLen += ucNBytes;;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     8d6:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	1f 91       	pop	r17
     8de:	08 95       	ret

000008e0 <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	00 d0       	rcall	.+0      	; 0x8e6 <eMBFuncWriteCoil+0x6>
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
     8ea:	fb 01       	movw	r30, r22
     8ec:	20 81       	ld	r18, Z
     8ee:	31 81       	ldd	r19, Z+1	; 0x01
     8f0:	25 30       	cpi	r18, 0x05	; 5
     8f2:	31 05       	cpc	r19, r1
     8f4:	01 f5       	brne	.+64     	; 0x936 <eMBFuncWriteCoil+0x56>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
     8f6:	fc 01       	movw	r30, r24
     8f8:	31 81       	ldd	r19, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
     8fa:	62 81       	ldd	r22, Z+2	; 0x02
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
     8fc:	24 81       	ldd	r18, Z+4	; 0x04
     8fe:	21 11       	cpse	r18, r1
     900:	1c c0       	rjmp	.+56     	; 0x93a <eMBFuncWriteCoil+0x5a>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
     902:	83 81       	ldd	r24, Z+3	; 0x03
     904:	9f ef       	ldi	r25, 0xFF	; 255
     906:	98 0f       	add	r25, r24
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
     908:	9e 3f       	cpi	r25, 0xFE	; 254
     90a:	c8 f0       	brcs	.+50     	; 0x93e <eMBFuncWriteCoil+0x5e>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
        {
            ucBuf[1] = 0;
     90c:	1a 82       	std	Y+2, r1	; 0x02
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
     90e:	8f 3f       	cpi	r24, 0xFF	; 255
     910:	19 f4       	brne	.+6      	; 0x918 <eMBFuncWriteCoil+0x38>
            {
                ucBuf[0] = 1;
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	89 83       	std	Y+1, r24	; 0x01
     916:	01 c0       	rjmp	.+2      	; 0x91a <eMBFuncWriteCoil+0x3a>
            }
            else
            {
                ucBuf[0] = 0;
     918:	19 82       	std	Y+1, r1	; 0x01
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
     91a:	70 e0       	ldi	r23, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
     91c:	73 2b       	or	r23, r19
        usRegAddress++;
     91e:	6f 5f       	subi	r22, 0xFF	; 255
     920:	7f 4f       	sbci	r23, 0xFF	; 255
            }
            else
            {
                ucBuf[0] = 0;
            }
            eRegStatus =
     922:	21 e0       	ldi	r18, 0x01	; 1
     924:	41 e0       	ldi	r20, 0x01	; 1
     926:	50 e0       	ldi	r21, 0x00	; 0
     928:	ce 01       	movw	r24, r28
     92a:	01 96       	adiw	r24, 0x01	; 1
     92c:	25 dc       	rcall	.-1974   	; 0x178 <eMBRegCoilsCB>
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
     92e:	88 23       	and	r24, r24
     930:	41 f0       	breq	.+16     	; 0x942 <eMBFuncWriteCoil+0x62>
            {
                eStatus = prveMBError2Exception( eRegStatus );
     932:	d8 d3       	rcall	.+1968   	; 0x10e4 <prveMBError2Exception>
     934:	07 c0       	rjmp	.+14     	; 0x944 <eMBFuncWriteCoil+0x64>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     936:	83 e0       	ldi	r24, 0x03	; 3
     938:	05 c0       	rjmp	.+10     	; 0x944 <eMBFuncWriteCoil+0x64>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     93a:	83 e0       	ldi	r24, 0x03	; 3
     93c:	03 c0       	rjmp	.+6      	; 0x944 <eMBFuncWriteCoil+0x64>
     93e:	83 e0       	ldi	r24, 0x03	; 3
     940:	01 c0       	rjmp	.+2      	; 0x944 <eMBFuncWriteCoil+0x64>
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
     942:	80 e0       	ldi	r24, 0x00	; 0
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
     944:	0f 90       	pop	r0
     946:	0f 90       	pop	r0
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	08 95       	ret

0000094e <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	eb 01       	movw	r28, r22
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
     954:	28 81       	ld	r18, Y
     956:	39 81       	ldd	r19, Y+1	; 0x01
     958:	26 30       	cpi	r18, 0x06	; 6
     95a:	31 05       	cpc	r19, r1
     95c:	08 f4       	brcc	.+2      	; 0x960 <eMBFuncWriteMultipleCoils+0x12>
     95e:	43 c0       	rjmp	.+134    	; 0x9e6 <eMBFuncWriteMultipleCoils+0x98>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
     960:	dc 01       	movw	r26, r24
     962:	11 96       	adiw	r26, 0x01	; 1
     964:	fc 91       	ld	r31, X
     966:	11 97       	sbiw	r26, 0x01	; 1
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
     968:	12 96       	adiw	r26, 0x02	; 2
     96a:	6c 91       	ld	r22, X
     96c:	12 97       	sbiw	r26, 0x02	; 2
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
     96e:	13 96       	adiw	r26, 0x03	; 3
     970:	4c 91       	ld	r20, X
     972:	13 97       	sbiw	r26, 0x03	; 3
     974:	50 e0       	ldi	r21, 0x00	; 0
     976:	54 2f       	mov	r21, r20
     978:	44 27       	eor	r20, r20
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
     97a:	14 96       	adiw	r26, 0x04	; 4
     97c:	2c 91       	ld	r18, X
     97e:	14 97       	sbiw	r26, 0x04	; 4
     980:	42 2b       	or	r20, r18

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
     982:	15 96       	adiw	r26, 0x05	; 5
     984:	7c 91       	ld	r23, X

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
     986:	9a 01       	movw	r18, r20
     988:	27 70       	andi	r18, 0x07	; 7
     98a:	33 27       	eor	r19, r19
     98c:	23 2b       	or	r18, r19
     98e:	51 f0       	breq	.+20     	; 0x9a4 <eMBFuncWriteMultipleCoils+0x56>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
     990:	9a 01       	movw	r18, r20
     992:	36 95       	lsr	r19
     994:	27 95       	ror	r18
     996:	36 95       	lsr	r19
     998:	27 95       	ror	r18
     99a:	36 95       	lsr	r19
     99c:	27 95       	ror	r18
     99e:	e1 e0       	ldi	r30, 0x01	; 1
     9a0:	e2 0f       	add	r30, r18
     9a2:	08 c0       	rjmp	.+16     	; 0x9b4 <eMBFuncWriteMultipleCoils+0x66>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
     9a4:	9a 01       	movw	r18, r20
     9a6:	36 95       	lsr	r19
     9a8:	27 95       	ror	r18
     9aa:	36 95       	lsr	r19
     9ac:	27 95       	ror	r18
     9ae:	36 95       	lsr	r19
     9b0:	27 95       	ror	r18
     9b2:	e2 2f       	mov	r30, r18
        }

        if( ( usCoilCnt >= 1 ) &&
     9b4:	9a 01       	movw	r18, r20
     9b6:	21 50       	subi	r18, 0x01	; 1
     9b8:	31 09       	sbc	r19, r1
     9ba:	20 3b       	cpi	r18, 0xB0	; 176
     9bc:	37 40       	sbci	r19, 0x07	; 7
     9be:	a8 f4       	brcc	.+42     	; 0x9ea <eMBFuncWriteMultipleCoils+0x9c>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
     9c0:	e7 13       	cpse	r30, r23
     9c2:	15 c0       	rjmp	.+42     	; 0x9ee <eMBFuncWriteMultipleCoils+0xa0>
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
     9c4:	70 e0       	ldi	r23, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
     9c6:	7f 2b       	or	r23, r31
        usRegAddress++;
     9c8:	6f 5f       	subi	r22, 0xFF	; 255
     9ca:	7f 4f       	sbci	r23, 0xFF	; 255

        if( ( usCoilCnt >= 1 ) &&
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
     9cc:	21 e0       	ldi	r18, 0x01	; 1
     9ce:	06 96       	adiw	r24, 0x06	; 6
     9d0:	d3 db       	rcall	.-2138   	; 0x178 <eMBRegCoilsCB>
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
     9d2:	88 23       	and	r24, r24
     9d4:	11 f0       	breq	.+4      	; 0x9da <eMBFuncWriteMultipleCoils+0x8c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
     9d6:	86 d3       	rcall	.+1804   	; 0x10e4 <prveMBError2Exception>
     9d8:	0b c0       	rjmp	.+22     	; 0x9f0 <eMBFuncWriteMultipleCoils+0xa2>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
     9da:	85 e0       	ldi	r24, 0x05	; 5
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	99 83       	std	Y+1, r25	; 0x01
     9e0:	88 83       	st	Y, r24
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	05 c0       	rjmp	.+10     	; 0x9f0 <eMBFuncWriteMultipleCoils+0xa2>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     9e6:	83 e0       	ldi	r24, 0x03	; 3
     9e8:	03 c0       	rjmp	.+6      	; 0x9f0 <eMBFuncWriteMultipleCoils+0xa2>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     9ea:	83 e0       	ldi	r24, 0x03	; 3
     9ec:	01 c0       	rjmp	.+2      	; 0x9f0 <eMBFuncWriteMultipleCoils+0xa2>
     9ee:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	08 95       	ret

000009f6 <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
     9f6:	1f 93       	push	r17
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	eb 01       	movw	r28, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
     9fe:	28 81       	ld	r18, Y
     a00:	39 81       	ldd	r19, Y+1	; 0x01
     a02:	25 30       	cpi	r18, 0x05	; 5
     a04:	31 05       	cpc	r19, r1
     a06:	09 f0       	breq	.+2      	; 0xa0a <eMBFuncReadDiscreteInputs+0x14>
     a08:	54 c0       	rjmp	.+168    	; 0xab2 <eMBFuncReadDiscreteInputs+0xbc>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     a0a:	dc 01       	movw	r26, r24
     a0c:	11 96       	adiw	r26, 0x01	; 1
     a0e:	ec 91       	ld	r30, X
     a10:	11 97       	sbiw	r26, 0x01	; 1
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	6c 91       	ld	r22, X
     a16:	12 97       	sbiw	r26, 0x02	; 2
        usRegAddress++;

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
     a18:	13 96       	adiw	r26, 0x03	; 3
     a1a:	4c 91       	ld	r20, X
     a1c:	13 97       	sbiw	r26, 0x03	; 3
     a1e:	50 e0       	ldi	r21, 0x00	; 0
     a20:	54 2f       	mov	r21, r20
     a22:	44 27       	eor	r20, r20
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2c 91       	ld	r18, X
     a28:	42 2b       	or	r20, r18

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
     a2a:	9a 01       	movw	r18, r20
     a2c:	21 50       	subi	r18, 0x01	; 1
     a2e:	31 09       	sbc	r19, r1
     a30:	2f 3c       	cpi	r18, 0xCF	; 207
     a32:	37 40       	sbci	r19, 0x07	; 7
     a34:	08 f0       	brcs	.+2      	; 0xa38 <eMBFuncReadDiscreteInputs+0x42>
     a36:	3f c0       	rjmp	.+126    	; 0xab6 <eMBFuncReadDiscreteInputs+0xc0>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
     a38:	19 82       	std	Y+1, r1	; 0x01
     a3a:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
     a3c:	22 e0       	ldi	r18, 0x02	; 2
     a3e:	dc 01       	movw	r26, r24
     a40:	2c 93       	st	X, r18
            *usLen += 1;
     a42:	28 81       	ld	r18, Y
     a44:	39 81       	ldd	r19, Y+1	; 0x01
     a46:	2f 5f       	subi	r18, 0xFF	; 255
     a48:	3f 4f       	sbci	r19, 0xFF	; 255
     a4a:	39 83       	std	Y+1, r19	; 0x01
     a4c:	28 83       	st	Y, r18

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
     a4e:	9a 01       	movw	r18, r20
     a50:	27 70       	andi	r18, 0x07	; 7
     a52:	33 27       	eor	r19, r19
     a54:	23 2b       	or	r18, r19
     a56:	51 f0       	breq	.+20     	; 0xa6c <eMBFuncReadDiscreteInputs+0x76>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
     a58:	9a 01       	movw	r18, r20
     a5a:	36 95       	lsr	r19
     a5c:	27 95       	ror	r18
     a5e:	36 95       	lsr	r19
     a60:	27 95       	ror	r18
     a62:	36 95       	lsr	r19
     a64:	27 95       	ror	r18
     a66:	11 e0       	ldi	r17, 0x01	; 1
     a68:	12 0f       	add	r17, r18
     a6a:	08 c0       	rjmp	.+16     	; 0xa7c <eMBFuncReadDiscreteInputs+0x86>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
     a6c:	9a 01       	movw	r18, r20
     a6e:	36 95       	lsr	r19
     a70:	27 95       	ror	r18
     a72:	36 95       	lsr	r19
     a74:	27 95       	ror	r18
     a76:	36 95       	lsr	r19
     a78:	27 95       	ror	r18
     a7a:	12 2f       	mov	r17, r18
            }
            *pucFrameCur++ = ucNBytes;
     a7c:	dc 01       	movw	r26, r24
     a7e:	11 96       	adiw	r26, 0x01	; 1
     a80:	1c 93       	st	X, r17
            *usLen += 1;
     a82:	28 81       	ld	r18, Y
     a84:	39 81       	ldd	r19, Y+1	; 0x01
     a86:	2f 5f       	subi	r18, 0xFF	; 255
     a88:	3f 4f       	sbci	r19, 0xFF	; 255
     a8a:	39 83       	std	Y+1, r19	; 0x01
     a8c:	28 83       	st	Y, r18
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     a8e:	70 e0       	ldi	r23, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     a90:	7e 2b       	or	r23, r30
        usRegAddress++;
     a92:	6f 5f       	subi	r22, 0xFF	; 255
     a94:	7f 4f       	sbci	r23, 0xFF	; 255
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
            }
            *pucFrameCur++ = ucNBytes;
            *usLen += 1;

            eRegStatus =
     a96:	02 96       	adiw	r24, 0x02	; 2
     a98:	71 db       	rcall	.-2334   	; 0x17c <eMBRegDiscreteCB>
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
     a9a:	88 23       	and	r24, r24
     a9c:	11 f0       	breq	.+4      	; 0xaa2 <eMBFuncReadDiscreteInputs+0xac>
            {
                eStatus = prveMBError2Exception( eRegStatus );
     a9e:	22 d3       	rcall	.+1604   	; 0x10e4 <prveMBError2Exception>
     aa0:	0b c0       	rjmp	.+22     	; 0xab8 <eMBFuncReadDiscreteInputs+0xc2>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
     aa2:	88 81       	ld	r24, Y
     aa4:	99 81       	ldd	r25, Y+1	; 0x01
     aa6:	81 0f       	add	r24, r17
     aa8:	91 1d       	adc	r25, r1
     aaa:	99 83       	std	Y+1, r25	; 0x01
     aac:	88 83       	st	Y, r24
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	03 c0       	rjmp	.+6      	; 0xab8 <eMBFuncReadDiscreteInputs+0xc2>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     ab2:	83 e0       	ldi	r24, 0x03	; 3
     ab4:	01 c0       	rjmp	.+2      	; 0xab8 <eMBFuncReadDiscreteInputs+0xc2>
                *usLen += ucNBytes;;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     ab6:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	1f 91       	pop	r17
     abe:	08 95       	ret

00000ac0 <eMBFuncWriteHoldingRegister>:
{
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
     ac0:	fb 01       	movw	r30, r22
     ac2:	20 81       	ld	r18, Z
     ac4:	31 81       	ldd	r19, Z+1	; 0x01
     ac6:	25 30       	cpi	r18, 0x05	; 5
     ac8:	31 05       	cpc	r19, r1
     aca:	91 f4       	brne	.+36     	; 0xaf0 <eMBFuncWriteHoldingRegister+0x30>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
     acc:	fc 01       	movw	r30, r24
     ace:	61 81       	ldd	r22, Z+1	; 0x01
     ad0:	70 e0       	ldi	r23, 0x00	; 0
     ad2:	76 2f       	mov	r23, r22
     ad4:	66 27       	eor	r22, r22
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
     ad6:	22 81       	ldd	r18, Z+2	; 0x02
     ad8:	62 2b       	or	r22, r18
        usRegAddress++;
     ada:	6f 5f       	subi	r22, 0xFF	; 255
     adc:	7f 4f       	sbci	r23, 0xFF	; 255

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
     ade:	21 e0       	ldi	r18, 0x01	; 1
     ae0:	41 e0       	ldi	r20, 0x01	; 1
     ae2:	50 e0       	ldi	r21, 0x00	; 0
     ae4:	03 96       	adiw	r24, 0x03	; 3
     ae6:	46 db       	rcall	.-2420   	; 0x174 <eMBRegHoldingCB>
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
     ae8:	88 23       	and	r24, r24
     aea:	21 f0       	breq	.+8      	; 0xaf4 <eMBFuncWriteHoldingRegister+0x34>
        {
            eStatus = prveMBError2Exception( eRegStatus );
     aec:	fb c2       	rjmp	.+1526   	; 0x10e4 <prveMBError2Exception>
     aee:	08 95       	ret
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     af0:	83 e0       	ldi	r24, 0x03	; 3
     af2:	08 95       	ret

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
     af4:	80 e0       	ldi	r24, 0x00	; 0
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
     af6:	08 95       	ret

00000af8 <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	eb 01       	movw	r28, r22
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
     afe:	28 81       	ld	r18, Y
     b00:	39 81       	ldd	r19, Y+1	; 0x01
     b02:	26 30       	cpi	r18, 0x06	; 6
     b04:	31 05       	cpc	r19, r1
     b06:	70 f1       	brcs	.+92     	; 0xb64 <eMBFuncWriteMultipleHoldingRegister+0x6c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
     b08:	dc 01       	movw	r26, r24
     b0a:	11 96       	adiw	r26, 0x01	; 1
     b0c:	ec 91       	ld	r30, X
     b0e:	11 97       	sbiw	r26, 0x01	; 1
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
     b10:	12 96       	adiw	r26, 0x02	; 2
     b12:	6c 91       	ld	r22, X
     b14:	12 97       	sbiw	r26, 0x02	; 2
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
     b16:	13 96       	adiw	r26, 0x03	; 3
     b18:	4c 91       	ld	r20, X
     b1a:	13 97       	sbiw	r26, 0x03	; 3
     b1c:	50 e0       	ldi	r21, 0x00	; 0
     b1e:	54 2f       	mov	r21, r20
     b20:	44 27       	eor	r20, r20
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
     b22:	14 96       	adiw	r26, 0x04	; 4
     b24:	2c 91       	ld	r18, X
     b26:	14 97       	sbiw	r26, 0x04	; 4
     b28:	42 2b       	or	r20, r18

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
     b2a:	15 96       	adiw	r26, 0x05	; 5
     b2c:	7c 91       	ld	r23, X

        if( ( usRegCount >= 1 ) &&
     b2e:	9a 01       	movw	r18, r20
     b30:	21 50       	subi	r18, 0x01	; 1
     b32:	31 09       	sbc	r19, r1
     b34:	28 37       	cpi	r18, 0x78	; 120
     b36:	31 05       	cpc	r19, r1
     b38:	b8 f4       	brcc	.+46     	; 0xb68 <eMBFuncWriteMultipleHoldingRegister+0x70>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
     b3a:	24 2f       	mov	r18, r20
     b3c:	22 0f       	add	r18, r18
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        if( ( usRegCount >= 1 ) &&
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
     b3e:	27 13       	cpse	r18, r23
     b40:	15 c0       	rjmp	.+42     	; 0xb6c <eMBFuncWriteMultipleHoldingRegister+0x74>
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
     b42:	70 e0       	ldi	r23, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
     b44:	7e 2b       	or	r23, r30
        usRegAddress++;
     b46:	6f 5f       	subi	r22, 0xFF	; 255
     b48:	7f 4f       	sbci	r23, 0xFF	; 255
        if( ( usRegCount >= 1 ) &&
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
        {
            /* Make callback to update the register values. */
            eRegStatus =
     b4a:	21 e0       	ldi	r18, 0x01	; 1
     b4c:	06 96       	adiw	r24, 0x06	; 6
     b4e:	12 db       	rcall	.-2524   	; 0x174 <eMBRegHoldingCB>
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
     b50:	88 23       	and	r24, r24
     b52:	11 f0       	breq	.+4      	; 0xb58 <eMBFuncWriteMultipleHoldingRegister+0x60>
            {
                eStatus = prveMBError2Exception( eRegStatus );
     b54:	c7 d2       	rcall	.+1422   	; 0x10e4 <prveMBError2Exception>
     b56:	0b c0       	rjmp	.+22     	; 0xb6e <eMBFuncWriteMultipleHoldingRegister+0x76>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
     b58:	85 e0       	ldi	r24, 0x05	; 5
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	99 83       	std	Y+1, r25	; 0x01
     b5e:	88 83       	st	Y, r24
{
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	05 c0       	rjmp	.+10     	; 0xb6e <eMBFuncWriteMultipleHoldingRegister+0x76>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     b64:	83 e0       	ldi	r24, 0x03	; 3
     b66:	03 c0       	rjmp	.+6      	; 0xb6e <eMBFuncWriteMultipleHoldingRegister+0x76>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     b68:	83 e0       	ldi	r24, 0x03	; 3
     b6a:	01 c0       	rjmp	.+2      	; 0xb6e <eMBFuncWriteMultipleHoldingRegister+0x76>
     b6c:	83 e0       	ldi	r24, 0x03	; 3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	08 95       	ret

00000b74 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
     b74:	0f 93       	push	r16
     b76:	1f 93       	push	r17
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
     b7c:	eb 01       	movw	r28, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
     b7e:	28 81       	ld	r18, Y
     b80:	39 81       	ldd	r19, Y+1	; 0x01
     b82:	25 30       	cpi	r18, 0x05	; 5
     b84:	31 05       	cpc	r19, r1
     b86:	a1 f5       	brne	.+104    	; 0xbf0 <eMBFuncReadHoldingRegister+0x7c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     b88:	fc 01       	movw	r30, r24
     b8a:	51 81       	ldd	r21, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     b8c:	62 81       	ldd	r22, Z+2	; 0x02
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
     b8e:	44 81       	ldd	r20, Z+4	; 0x04
     b90:	04 2f       	mov	r16, r20
     b92:	10 e0       	ldi	r17, 0x00	; 0

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
     b94:	98 01       	movw	r18, r16
     b96:	21 50       	subi	r18, 0x01	; 1
     b98:	31 09       	sbc	r19, r1
     b9a:	2d 37       	cpi	r18, 0x7D	; 125
     b9c:	31 05       	cpc	r19, r1
     b9e:	50 f5       	brcc	.+84     	; 0xbf4 <eMBFuncReadHoldingRegister+0x80>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
     ba0:	19 82       	std	Y+1, r1	; 0x01
     ba2:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
     ba4:	23 e0       	ldi	r18, 0x03	; 3
     ba6:	20 83       	st	Z, r18
            *usLen += 1;
     ba8:	28 81       	ld	r18, Y
     baa:	39 81       	ldd	r19, Y+1	; 0x01
     bac:	2f 5f       	subi	r18, 0xFF	; 255
     bae:	3f 4f       	sbci	r19, 0xFF	; 255
     bb0:	39 83       	std	Y+1, r19	; 0x01
     bb2:	28 83       	st	Y, r18

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
     bb4:	44 0f       	add	r20, r20
     bb6:	41 83       	std	Z+1, r20	; 0x01
            *usLen += 1;
     bb8:	28 81       	ld	r18, Y
     bba:	39 81       	ldd	r19, Y+1	; 0x01
     bbc:	2f 5f       	subi	r18, 0xFF	; 255
     bbe:	3f 4f       	sbci	r19, 0xFF	; 255
     bc0:	39 83       	std	Y+1, r19	; 0x01
     bc2:	28 83       	st	Y, r18
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     bc4:	70 e0       	ldi	r23, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     bc6:	75 2b       	or	r23, r21
        usRegAddress++;
     bc8:	6f 5f       	subi	r22, 0xFF	; 255
     bca:	7f 4f       	sbci	r23, 0xFF	; 255
            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
            *usLen += 1;

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	a8 01       	movw	r20, r16
     bd0:	02 96       	adiw	r24, 0x02	; 2
     bd2:	d0 da       	rcall	.-2656   	; 0x174 <eMBRegHoldingCB>
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
     bd4:	88 23       	and	r24, r24
     bd6:	11 f0       	breq	.+4      	; 0xbdc <eMBFuncReadHoldingRegister+0x68>
            {
                eStatus = prveMBError2Exception( eRegStatus );
     bd8:	85 d2       	rcall	.+1290   	; 0x10e4 <prveMBError2Exception>
     bda:	0d c0       	rjmp	.+26     	; 0xbf6 <eMBFuncReadHoldingRegister+0x82>
            }
            else
            {
                *usLen += usRegCount * 2;
     bdc:	00 0f       	add	r16, r16
     bde:	11 1f       	adc	r17, r17
     be0:	88 81       	ld	r24, Y
     be2:	99 81       	ldd	r25, Y+1	; 0x01
     be4:	08 0f       	add	r16, r24
     be6:	19 1f       	adc	r17, r25
     be8:	19 83       	std	Y+1, r17	; 0x01
     bea:	08 83       	st	Y, r16
{
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	03 c0       	rjmp	.+6      	; 0xbf6 <eMBFuncReadHoldingRegister+0x82>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     bf0:	83 e0       	ldi	r24, 0x03	; 3
     bf2:	01 c0       	rjmp	.+2      	; 0xbf6 <eMBFuncReadHoldingRegister+0x82>
                *usLen += usRegCount * 2;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     bf4:	83 e0       	ldi	r24, 0x03	; 3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	1f 91       	pop	r17
     bfc:	0f 91       	pop	r16
     bfe:	08 95       	ret

00000c00 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
     c00:	cf 92       	push	r12
     c02:	df 92       	push	r13
     c04:	ef 92       	push	r14
     c06:	ff 92       	push	r15
     c08:	0f 93       	push	r16
     c0a:	1f 93       	push	r17
     c0c:	cf 93       	push	r28
     c0e:	df 93       	push	r29
     c10:	ec 01       	movw	r28, r24
     c12:	8b 01       	movw	r16, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
     c14:	fb 01       	movw	r30, r22
     c16:	80 81       	ld	r24, Z
     c18:	91 81       	ldd	r25, Z+1	; 0x01
     c1a:	0a 97       	sbiw	r24, 0x0a	; 10
     c1c:	08 f4       	brcc	.+2      	; 0xc20 <eMBFuncReadWriteMultipleHoldingRegister+0x20>
     c1e:	56 c0       	rjmp	.+172    	; 0xccc <eMBFuncReadWriteMultipleHoldingRegister+0xcc>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
     c20:	d9 80       	ldd	r13, Y+1	; 0x01
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
     c22:	ca 80       	ldd	r12, Y+2	; 0x02
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
     c24:	eb 80       	ldd	r14, Y+3	; 0x03
     c26:	f1 2c       	mov	r15, r1
     c28:	fe 2c       	mov	r15, r14
     c2a:	ee 24       	eor	r14, r14
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
     c2c:	8c 81       	ldd	r24, Y+4	; 0x04
     c2e:	e8 2a       	or	r14, r24

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
     c30:	ed 81       	ldd	r30, Y+5	; 0x05
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
     c32:	6e 81       	ldd	r22, Y+6	; 0x06
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
     c34:	2f 81       	ldd	r18, Y+7	; 0x07
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
     c36:	48 85       	ldd	r20, Y+8	; 0x08

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
     c38:	39 85       	ldd	r19, Y+9	; 0x09

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
     c3a:	c7 01       	movw	r24, r14
     c3c:	01 97       	sbiw	r24, 0x01	; 1
     c3e:	8d 37       	cpi	r24, 0x7D	; 125
     c40:	91 05       	cpc	r25, r1
     c42:	08 f0       	brcs	.+2      	; 0xc46 <eMBFuncReadWriteMultipleHoldingRegister+0x46>
     c44:	45 c0       	rjmp	.+138    	; 0xcd0 <eMBFuncReadWriteMultipleHoldingRegister+0xd0>

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
     c46:	50 e0       	ldi	r21, 0x00	; 0
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
     c48:	52 2b       	or	r21, r18

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
     c4a:	ca 01       	movw	r24, r20
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	89 37       	cpi	r24, 0x79	; 121
     c50:	91 05       	cpc	r25, r1
     c52:	08 f0       	brcs	.+2      	; 0xc56 <eMBFuncReadWriteMultipleHoldingRegister+0x56>
     c54:	3f c0       	rjmp	.+126    	; 0xcd4 <eMBFuncReadWriteMultipleHoldingRegister+0xd4>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
     c56:	83 2f       	mov	r24, r19
     c58:	90 e0       	ldi	r25, 0x00	; 0
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
     c5a:	9a 01       	movw	r18, r20
     c5c:	22 0f       	add	r18, r18
     c5e:	33 1f       	adc	r19, r19
     c60:	28 17       	cp	r18, r24
     c62:	39 07       	cpc	r19, r25
     c64:	c9 f5       	brne	.+114    	; 0xcd8 <eMBFuncReadWriteMultipleHoldingRegister+0xd8>
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
     c66:	70 e0       	ldi	r23, 0x00	; 0
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
     c68:	7e 2b       	or	r23, r30
        usRegWriteAddress++;
     c6a:	6f 5f       	subi	r22, 0xFF	; 255
     c6c:	7f 4f       	sbci	r23, 0xFF	; 255
        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
     c6e:	21 e0       	ldi	r18, 0x01	; 1
     c70:	ce 01       	movw	r24, r28
     c72:	0a 96       	adiw	r24, 0x0a	; 10
     c74:	7f da       	rcall	.-2818   	; 0x174 <eMBRegHoldingCB>
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
     c76:	81 11       	cpse	r24, r1
     c78:	31 c0       	rjmp	.+98     	; 0xcdc <eMBFuncReadWriteMultipleHoldingRegister+0xdc>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
                *usLen = MB_PDU_FUNC_OFF;
     c7a:	f8 01       	movw	r30, r16
     c7c:	11 82       	std	Z+1, r1	; 0x01
     c7e:	10 82       	st	Z, r1

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
     c80:	87 e1       	ldi	r24, 0x17	; 23
     c82:	88 83       	st	Y, r24
                *usLen += 1;
     c84:	80 81       	ld	r24, Z
     c86:	91 81       	ldd	r25, Z+1	; 0x01
     c88:	01 96       	adiw	r24, 0x01	; 1
     c8a:	91 83       	std	Z+1, r25	; 0x01
     c8c:	80 83       	st	Z, r24

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
     c8e:	8e 2d       	mov	r24, r14
     c90:	88 0f       	add	r24, r24
     c92:	89 83       	std	Y+1, r24	; 0x01
                *usLen += 1;
     c94:	80 81       	ld	r24, Z
     c96:	91 81       	ldd	r25, Z+1	; 0x01
     c98:	01 96       	adiw	r24, 0x01	; 1
     c9a:	91 83       	std	Z+1, r25	; 0x01
     c9c:	80 83       	st	Z, r24
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
     c9e:	6c 2d       	mov	r22, r12
     ca0:	70 e0       	ldi	r23, 0x00	; 0
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
     ca2:	7d 29       	or	r23, r13
        usRegReadAddress++;
     ca4:	6f 5f       	subi	r22, 0xFF	; 255
     ca6:	7f 4f       	sbci	r23, 0xFF	; 255
                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
                *usLen += 1;

                /* Make the read callback. */
                eRegStatus =
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	a7 01       	movw	r20, r14
     cac:	ce 01       	movw	r24, r28
     cae:	02 96       	adiw	r24, 0x02	; 2
     cb0:	61 da       	rcall	.-2878   	; 0x174 <eMBRegHoldingCB>
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
                if( eRegStatus == MB_ENOERR )
     cb2:	81 11       	cpse	r24, r1
     cb4:	13 c0       	rjmp	.+38     	; 0xcdc <eMBFuncReadWriteMultipleHoldingRegister+0xdc>
                {
                    *usLen += 2 * usRegReadCount;
     cb6:	ee 0c       	add	r14, r14
     cb8:	ff 1c       	adc	r15, r15
     cba:	f8 01       	movw	r30, r16
     cbc:	80 81       	ld	r24, Z
     cbe:	91 81       	ldd	r25, Z+1	; 0x01
     cc0:	8e 0d       	add	r24, r14
     cc2:	9f 1d       	adc	r25, r15
     cc4:	91 83       	std	Z+1, r25	; 0x01
     cc6:	80 83       	st	Z, r24
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	09 c0       	rjmp	.+18     	; 0xcde <eMBFuncReadWriteMultipleHoldingRegister+0xde>
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	07 c0       	rjmp	.+14     	; 0xcde <eMBFuncReadWriteMultipleHoldingRegister+0xde>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     cd0:	83 e0       	ldi	r24, 0x03	; 3
     cd2:	05 c0       	rjmp	.+10     	; 0xcde <eMBFuncReadWriteMultipleHoldingRegister+0xde>
     cd4:	83 e0       	ldi	r24, 0x03	; 3
     cd6:	03 c0       	rjmp	.+6      	; 0xcde <eMBFuncReadWriteMultipleHoldingRegister+0xde>
     cd8:	83 e0       	ldi	r24, 0x03	; 3
     cda:	01 c0       	rjmp	.+2      	; 0xcde <eMBFuncReadWriteMultipleHoldingRegister+0xde>
                    *usLen += 2 * usRegReadCount;
                }
            }
            if( eRegStatus != MB_ENOERR )
            {
                eStatus = prveMBError2Exception( eRegStatus );
     cdc:	03 d2       	rcall	.+1030   	; 0x10e4 <prveMBError2Exception>
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
        }
    }
    return eStatus;
}
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	1f 91       	pop	r17
     ce4:	0f 91       	pop	r16
     ce6:	ff 90       	pop	r15
     ce8:	ef 90       	pop	r14
     cea:	df 90       	pop	r13
     cec:	cf 90       	pop	r12
     cee:	08 95       	ret

00000cf0 <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
     cf0:	0f 93       	push	r16
     cf2:	1f 93       	push	r17
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	eb 01       	movw	r28, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
     cfa:	28 81       	ld	r18, Y
     cfc:	39 81       	ldd	r19, Y+1	; 0x01
     cfe:	25 30       	cpi	r18, 0x05	; 5
     d00:	31 05       	cpc	r19, r1
     d02:	b9 f5       	brne	.+110    	; 0xd72 <eMBFuncReadInputRegister+0x82>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     d04:	fc 01       	movw	r30, r24
     d06:	41 81       	ldd	r20, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     d08:	62 81       	ldd	r22, Z+2	; 0x02
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
     d0a:	03 81       	ldd	r16, Z+3	; 0x03
     d0c:	10 e0       	ldi	r17, 0x00	; 0
     d0e:	10 2f       	mov	r17, r16
     d10:	00 27       	eor	r16, r16
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
     d12:	24 81       	ldd	r18, Z+4	; 0x04
     d14:	02 2b       	or	r16, r18

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
     d16:	98 01       	movw	r18, r16
     d18:	21 50       	subi	r18, 0x01	; 1
     d1a:	31 09       	sbc	r19, r1
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
     d1c:	2c 37       	cpi	r18, 0x7C	; 124
     d1e:	31 05       	cpc	r19, r1
     d20:	50 f5       	brcc	.+84     	; 0xd76 <eMBFuncReadInputRegister+0x86>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
     d22:	19 82       	std	Y+1, r1	; 0x01
     d24:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
     d26:	24 e0       	ldi	r18, 0x04	; 4
     d28:	20 83       	st	Z, r18
            *usLen += 1;
     d2a:	28 81       	ld	r18, Y
     d2c:	39 81       	ldd	r19, Y+1	; 0x01
     d2e:	2f 5f       	subi	r18, 0xFF	; 255
     d30:	3f 4f       	sbci	r19, 0xFF	; 255
     d32:	39 83       	std	Y+1, r19	; 0x01
     d34:	28 83       	st	Y, r18

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
     d36:	20 2f       	mov	r18, r16
     d38:	22 0f       	add	r18, r18
     d3a:	21 83       	std	Z+1, r18	; 0x01
            *usLen += 1;
     d3c:	28 81       	ld	r18, Y
     d3e:	39 81       	ldd	r19, Y+1	; 0x01
     d40:	2f 5f       	subi	r18, 0xFF	; 255
     d42:	3f 4f       	sbci	r19, 0xFF	; 255
     d44:	39 83       	std	Y+1, r19	; 0x01
     d46:	28 83       	st	Y, r18
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     d48:	70 e0       	ldi	r23, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     d4a:	74 2b       	or	r23, r20
        usRegAddress++;
     d4c:	6f 5f       	subi	r22, 0xFF	; 255
     d4e:	7f 4f       	sbci	r23, 0xFF	; 255

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
            *usLen += 1;

            eRegStatus =
     d50:	a8 01       	movw	r20, r16
     d52:	02 96       	adiw	r24, 0x02	; 2
     d54:	e5 d9       	rcall	.-3126   	; 0x120 <eMBRegInputCB>
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
     d56:	88 23       	and	r24, r24
     d58:	11 f0       	breq	.+4      	; 0xd5e <eMBFuncReadInputRegister+0x6e>
            {
                eStatus = prveMBError2Exception( eRegStatus );
     d5a:	c4 d1       	rcall	.+904    	; 0x10e4 <prveMBError2Exception>
     d5c:	0d c0       	rjmp	.+26     	; 0xd78 <eMBFuncReadInputRegister+0x88>
            }
            else
            {
                *usLen += usRegCount * 2;
     d5e:	00 0f       	add	r16, r16
     d60:	11 1f       	adc	r17, r17
     d62:	88 81       	ld	r24, Y
     d64:	99 81       	ldd	r25, Y+1	; 0x01
     d66:	08 0f       	add	r16, r24
     d68:	19 1f       	adc	r17, r25
     d6a:	19 83       	std	Y+1, r17	; 0x01
     d6c:	08 83       	st	Y, r16
{
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	03 c0       	rjmp	.+6      	; 0xd78 <eMBFuncReadInputRegister+0x88>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     d72:	83 e0       	ldi	r24, 0x03	; 3
     d74:	01 c0       	rjmp	.+2      	; 0xd78 <eMBFuncReadInputRegister+0x88>
                *usLen += usRegCount * 2;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
     d76:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	1f 91       	pop	r17
     d7e:	0f 91       	pop	r16
     d80:	08 95       	ret

00000d82 <eMBSetSlaveID>:
/* ----------------------- Start implementation -----------------------------*/

eMBErrorCode
eMBSetSlaveID( UCHAR ucSlaveID, BOOL xIsRunning,
               UCHAR const *pucAdditional, USHORT usAdditionalLen )
{
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	fa 01       	movw	r30, r20
    eMBErrorCode    eStatus = MB_ENOERR;

    /* the first byte and second byte in the buffer is reserved for
     * the parameter ucSlaveID and the running flag. The rest of
     * the buffer is available for additional data. */
    if( usAdditionalLen + 2 < MB_FUNC_OTHER_REP_SLAVEID_BUF )
     d88:	e9 01       	movw	r28, r18
     d8a:	22 96       	adiw	r28, 0x02	; 2
     d8c:	c0 32       	cpi	r28, 0x20	; 32
     d8e:	d1 05       	cpc	r29, r1
     d90:	e8 f4       	brcc	.+58     	; 0xdcc <eMBSetSlaveID+0x4a>
    {
        usMBSlaveIDLen = 0;
        ucMBSlaveID[usMBSlaveIDLen++] = ucSlaveID;
     d92:	80 93 59 03 	sts	0x0359, r24
        ucMBSlaveID[usMBSlaveIDLen++] = ( UCHAR )( xIsRunning ? 0xFF : 0x00 );
     d96:	82 e0       	ldi	r24, 0x02	; 2
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	90 93 58 03 	sts	0x0358, r25
     d9e:	80 93 57 03 	sts	0x0357, r24
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	61 11       	cpse	r22, r1
     da6:	01 c0       	rjmp	.+2      	; 0xdaa <eMBSetSlaveID+0x28>
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	81 95       	neg	r24
     dac:	80 93 5a 03 	sts	0x035A, r24
        if( usAdditionalLen > 0 )
     db0:	21 15       	cp	r18, r1
     db2:	31 05       	cpc	r19, r1
     db4:	69 f0       	breq	.+26     	; 0xdd0 <eMBSetSlaveID+0x4e>
        {
            memcpy( &ucMBSlaveID[usMBSlaveIDLen], pucAdditional,
     db6:	a9 01       	movw	r20, r18
     db8:	bf 01       	movw	r22, r30
     dba:	8b e5       	ldi	r24, 0x5B	; 91
     dbc:	93 e0       	ldi	r25, 0x03	; 3
     dbe:	a4 d2       	rcall	.+1352   	; 0x1308 <memcpy>
                    ( size_t )usAdditionalLen );
            usMBSlaveIDLen += usAdditionalLen;
     dc0:	d0 93 58 03 	sts	0x0358, r29
     dc4:	c0 93 57 03 	sts	0x0357, r28

eMBErrorCode
eMBSetSlaveID( UCHAR ucSlaveID, BOOL xIsRunning,
               UCHAR const *pucAdditional, USHORT usAdditionalLen )
{
    eMBErrorCode    eStatus = MB_ENOERR;
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	03 c0       	rjmp	.+6      	; 0xdd2 <eMBSetSlaveID+0x50>
            usMBSlaveIDLen += usAdditionalLen;
        }
    }
    else
    {
        eStatus = MB_ENORES;
     dcc:	84 e0       	ldi	r24, 0x04	; 4
     dce:	01 c0       	rjmp	.+2      	; 0xdd2 <eMBSetSlaveID+0x50>

eMBErrorCode
eMBSetSlaveID( UCHAR ucSlaveID, BOOL xIsRunning,
               UCHAR const *pucAdditional, USHORT usAdditionalLen )
{
    eMBErrorCode    eStatus = MB_ENOERR;
     dd0:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
        eStatus = MB_ENORES;
    }
    return eStatus;
}
     dd2:	df 91       	pop	r29
     dd4:	cf 91       	pop	r28
     dd6:	08 95       	ret

00000dd8 <eMBFuncReportSlaveID>:

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
     dd8:	0f 93       	push	r16
     dda:	1f 93       	push	r17
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
     de0:	8b 01       	movw	r16, r22
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
     de2:	c0 91 57 03 	lds	r28, 0x0357
     de6:	d0 91 58 03 	lds	r29, 0x0358
     dea:	ae 01       	movw	r20, r28
     dec:	69 e5       	ldi	r22, 0x59	; 89
     dee:	73 e0       	ldi	r23, 0x03	; 3
     df0:	01 96       	adiw	r24, 0x01	; 1
     df2:	8a d2       	rcall	.+1300   	; 0x1308 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
     df4:	21 96       	adiw	r28, 0x01	; 1
     df6:	f8 01       	movw	r30, r16
     df8:	d1 83       	std	Z+1, r29	; 0x01
     dfa:	c0 83       	st	Z, r28
    return MB_EX_NONE;
}
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	1f 91       	pop	r17
     e04:	0f 91       	pop	r16
     e06:	08 95       	ret

00000e08 <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
     e08:	cf 92       	push	r12
     e0a:	df 92       	push	r13
     e0c:	ef 92       	push	r14
     e0e:	ff 92       	push	r15
     e10:	0f 93       	push	r16
     e12:	86 2f       	mov	r24, r22
     e14:	69 01       	movw	r12, r18
     e16:	7a 01       	movw	r14, r20
    eMBErrorCode    eStatus = MB_ENOERR;
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
     e18:	f8 94       	cli

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
     e1a:	28 e0       	ldi	r18, 0x08	; 8
     e1c:	b7 01       	movw	r22, r14
     e1e:	a6 01       	movw	r20, r12
     e20:	9a d1       	rcall	.+820    	; 0x1156 <xMBPortSerialInit>
     e22:	81 30       	cpi	r24, 0x01	; 1
     e24:	f1 f4       	brne	.+60     	; 0xe62 <eMBRTUInit+0x5a>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	c8 16       	cp	r12, r24
     e2a:	8b e4       	ldi	r24, 0x4B	; 75
     e2c:	d8 06       	cpc	r13, r24
     e2e:	e1 04       	cpc	r14, r1
     e30:	f1 04       	cpc	r15, r1
     e32:	70 f4       	brcc	.+28     	; 0xe50 <eMBRTUInit+0x48>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
     e34:	a7 01       	movw	r20, r14
     e36:	96 01       	movw	r18, r12
     e38:	22 0f       	add	r18, r18
     e3a:	33 1f       	adc	r19, r19
     e3c:	44 1f       	adc	r20, r20
     e3e:	55 1f       	adc	r21, r21
     e40:	60 ea       	ldi	r22, 0xA0	; 160
     e42:	7f e7       	ldi	r23, 0x7F	; 127
     e44:	87 e1       	ldi	r24, 0x17	; 23
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	2e d2       	rcall	.+1116   	; 0x12a6 <__udivmodsi4>
     e4a:	da 01       	movw	r26, r20
     e4c:	c9 01       	movw	r24, r18
     e4e:	04 c0       	rjmp	.+8      	; 0xe58 <eMBRTUInit+0x50>
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
        {
            usTimerT35_50us = 35;       /* 1800us. */
     e50:	83 e2       	ldi	r24, 0x23	; 35
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	a0 e0       	ldi	r26, 0x00	; 0
     e56:	b0 e0       	ldi	r27, 0x00	; 0
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
     e58:	c0 d1       	rcall	.+896    	; 0x11da <xMBPortTimersInit>
     e5a:	81 30       	cpi	r24, 0x01	; 1
     e5c:	21 f4       	brne	.+8      	; 0xe66 <eMBRTUInit+0x5e>

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
    eMBErrorCode    eStatus = MB_ENOERR;
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	03 c0       	rjmp	.+6      	; 0xe68 <eMBRTUInit+0x60>
    ENTER_CRITICAL_SECTION(  );

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
    {
        eStatus = MB_EPORTERR;
     e62:	83 e0       	ldi	r24, 0x03	; 3
     e64:	01 c0       	rjmp	.+2      	; 0xe68 <eMBRTUInit+0x60>
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
        {
            eStatus = MB_EPORTERR;
     e66:	83 e0       	ldi	r24, 0x03	; 3
        }
    }
    EXIT_CRITICAL_SECTION(  );
     e68:	78 94       	sei

    return eStatus;
}
     e6a:	0f 91       	pop	r16
     e6c:	ff 90       	pop	r15
     e6e:	ef 90       	pop	r14
     e70:	df 90       	pop	r13
     e72:	cf 90       	pop	r12
     e74:	08 95       	ret

00000e76 <eMBRTUStart>:

void
eMBRTUStart( void )
{
    ENTER_CRITICAL_SECTION(  );
     e76:	f8 94       	cli
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
     e78:	10 92 7f 03 	sts	0x037F, r1
    vMBPortSerialEnable( TRUE, FALSE );
     e7c:	60 e0       	ldi	r22, 0x00	; 0
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	58 d1       	rcall	.+688    	; 0x1132 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
     e82:	c7 d1       	rcall	.+910    	; 0x1212 <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
     e84:	78 94       	sei
     e86:	08 95       	ret

00000e88 <eMBRTUStop>:
}

void
eMBRTUStop( void )
{
    ENTER_CRITICAL_SECTION(  );
     e88:	f8 94       	cli
    vMBPortSerialEnable( FALSE, FALSE );
     e8a:	60 e0       	ldi	r22, 0x00	; 0
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	51 d1       	rcall	.+674    	; 0x1132 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
     e90:	d5 d1       	rcall	.+938    	; 0x123c <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
     e92:	78 94       	sei
     e94:	08 95       	ret

00000e96 <eMBRTUReceive>:
}

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
     e96:	ef 92       	push	r14
     e98:	ff 92       	push	r15
     e9a:	0f 93       	push	r16
     e9c:	1f 93       	push	r17
     e9e:	cf 93       	push	r28
     ea0:	df 93       	push	r29
     ea2:	7c 01       	movw	r14, r24
     ea4:	eb 01       	movw	r28, r22
     ea6:	8a 01       	movw	r16, r20
    BOOL            xFrameReceived = FALSE;
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION(  );
     ea8:	f8 94       	cli
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
     eaa:	20 91 79 03 	lds	r18, 0x0379
     eae:	30 91 7a 03 	lds	r19, 0x037A
     eb2:	24 30       	cpi	r18, 0x04	; 4
     eb4:	31 05       	cpc	r19, r1
     eb6:	d8 f0       	brcs	.+54     	; 0xeee <eMBRTUReceive+0x58>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
     eb8:	60 91 79 03 	lds	r22, 0x0379
     ebc:	70 91 7a 03 	lds	r23, 0x037A
     ec0:	8f e8       	ldi	r24, 0x8F	; 143
     ec2:	93 e0       	ldi	r25, 0x03	; 3
     ec4:	89 dc       	rcall	.-1774   	; 0x7d8 <usMBCRC16>
     ec6:	89 2b       	or	r24, r25
     ec8:	a1 f4       	brne	.+40     	; 0xef2 <eMBRTUReceive+0x5c>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
     eca:	80 91 8f 03 	lds	r24, 0x038F
     ece:	f7 01       	movw	r30, r14
     ed0:	80 83       	st	Z, r24

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
     ed2:	80 91 79 03 	lds	r24, 0x0379
     ed6:	90 91 7a 03 	lds	r25, 0x037A
     eda:	03 97       	sbiw	r24, 0x03	; 3
     edc:	f8 01       	movw	r30, r16
     ede:	91 83       	std	Z+1, r25	; 0x01
     ee0:	80 83       	st	Z, r24

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
     ee2:	80 e9       	ldi	r24, 0x90	; 144
     ee4:	93 e0       	ldi	r25, 0x03	; 3
     ee6:	99 83       	std	Y+1, r25	; 0x01
     ee8:	88 83       	st	Y, r24

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
    BOOL            xFrameReceived = FALSE;
    eMBErrorCode    eStatus = MB_ENOERR;
     eea:	80 e0       	ldi	r24, 0x00	; 0
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
        xFrameReceived = TRUE;
     eec:	03 c0       	rjmp	.+6      	; 0xef4 <eMBRTUReceive+0x5e>
    }
    else
    {
        eStatus = MB_EIO;
     eee:	85 e0       	ldi	r24, 0x05	; 5
     ef0:	01 c0       	rjmp	.+2      	; 0xef4 <eMBRTUReceive+0x5e>
     ef2:	85 e0       	ldi	r24, 0x05	; 5
    }

    EXIT_CRITICAL_SECTION(  );
     ef4:	78 94       	sei
    return eStatus;
}
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	1f 91       	pop	r17
     efc:	0f 91       	pop	r16
     efe:	ff 90       	pop	r15
     f00:	ef 90       	pop	r14
     f02:	08 95       	ret

00000f04 <eMBRTUSend>:
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION(  );
     f04:	f8 94       	cli

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
     f06:	90 91 7f 03 	lds	r25, 0x037F
     f0a:	91 30       	cpi	r25, 0x01	; 1
     f0c:	09 f0       	breq	.+2      	; 0xf10 <eMBRTUSend+0xc>
     f0e:	44 c0       	rjmp	.+136    	; 0xf98 <eMBRTUSend+0x94>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
     f10:	fb 01       	movw	r30, r22
     f12:	31 97       	sbiw	r30, 0x01	; 1
     f14:	f0 93 7e 03 	sts	0x037E, r31
     f18:	e0 93 7d 03 	sts	0x037D, r30
        usSndBufferCount = 1;
     f1c:	21 e0       	ldi	r18, 0x01	; 1
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	30 93 7c 03 	sts	0x037C, r19
     f24:	20 93 7b 03 	sts	0x037B, r18

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
     f28:	80 83       	st	Z, r24
        usSndBufferCount += usLength;
     f2a:	80 91 7b 03 	lds	r24, 0x037B
     f2e:	90 91 7c 03 	lds	r25, 0x037C
     f32:	48 0f       	add	r20, r24
     f34:	59 1f       	adc	r21, r25
     f36:	50 93 7c 03 	sts	0x037C, r21
     f3a:	40 93 7b 03 	sts	0x037B, r20

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
     f3e:	60 91 7b 03 	lds	r22, 0x037B
     f42:	70 91 7c 03 	lds	r23, 0x037C
     f46:	cf 01       	movw	r24, r30
     f48:	47 dc       	rcall	.-1906   	; 0x7d8 <usMBCRC16>
     f4a:	69 2f       	mov	r22, r25
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
     f4c:	20 91 7b 03 	lds	r18, 0x037B
     f50:	30 91 7c 03 	lds	r19, 0x037C
     f54:	a9 01       	movw	r20, r18
     f56:	4f 5f       	subi	r20, 0xFF	; 255
     f58:	5f 4f       	sbci	r21, 0xFF	; 255
     f5a:	50 93 7c 03 	sts	0x037C, r21
     f5e:	40 93 7b 03 	sts	0x037B, r20
     f62:	f9 01       	movw	r30, r18
     f64:	e1 57       	subi	r30, 0x71	; 113
     f66:	fc 4f       	sbci	r31, 0xFC	; 252
     f68:	80 83       	st	Z, r24
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
     f6a:	80 91 7b 03 	lds	r24, 0x037B
     f6e:	90 91 7c 03 	lds	r25, 0x037C
     f72:	9c 01       	movw	r18, r24
     f74:	2f 5f       	subi	r18, 0xFF	; 255
     f76:	3f 4f       	sbci	r19, 0xFF	; 255
     f78:	30 93 7c 03 	sts	0x037C, r19
     f7c:	20 93 7b 03 	sts	0x037B, r18
     f80:	fc 01       	movw	r30, r24
     f82:	e1 57       	subi	r30, 0x71	; 113
     f84:	fc 4f       	sbci	r31, 0xFC	; 252
     f86:	60 83       	st	Z, r22

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	80 93 80 03 	sts	0x0380, r24
        vMBPortSerialEnable( FALSE, TRUE );
     f8e:	61 e0       	ldi	r22, 0x01	; 1
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	cf d0       	rcall	.+414    	; 0x1132 <vMBPortSerialEnable>
}

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	01 c0       	rjmp	.+2      	; 0xf9a <eMBRTUSend+0x96>
        eSndState = STATE_TX_XMIT;
        vMBPortSerialEnable( FALSE, TRUE );
    }
    else
    {
        eStatus = MB_EIO;
     f98:	85 e0       	ldi	r24, 0x05	; 5
    }
    EXIT_CRITICAL_SECTION(  );
     f9a:	78 94       	sei
    return eStatus;
}
     f9c:	08 95       	ret

00000f9e <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
     fa2:	1f 92       	push	r1
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
     fa8:	ce 01       	movw	r24, r28
     faa:	01 96       	adiw	r24, 0x01	; 1
     fac:	11 d1       	rcall	.+546    	; 0x11d0 <xMBPortSerialGetByte>

    switch ( eRcvState )
     fae:	80 91 7f 03 	lds	r24, 0x037F
     fb2:	81 30       	cpi	r24, 0x01	; 1
     fb4:	51 f0       	breq	.+20     	; 0xfca <xMBRTUReceiveFSM+0x2c>
     fb6:	28 f0       	brcs	.+10     	; 0xfc2 <xMBRTUReceiveFSM+0x24>
     fb8:	82 30       	cpi	r24, 0x02	; 2
     fba:	01 f1       	breq	.+64     	; 0xffc <xMBRTUReceiveFSM+0x5e>
     fbc:	83 30       	cpi	r24, 0x03	; 3
     fbe:	19 f0       	breq	.+6      	; 0xfc6 <xMBRTUReceiveFSM+0x28>
     fc0:	3a c0       	rjmp	.+116    	; 0x1036 <xMBRTUReceiveFSM+0x98>
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable(  );
     fc2:	27 d1       	rcall	.+590    	; 0x1212 <vMBPortTimersEnable>
        break;
     fc4:	38 c0       	rjmp	.+112    	; 0x1036 <xMBRTUReceiveFSM+0x98>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable(  );
     fc6:	25 d1       	rcall	.+586    	; 0x1212 <vMBPortTimersEnable>
        break;
     fc8:	36 c0       	rjmp	.+108    	; 0x1036 <xMBRTUReceiveFSM+0x98>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
     fca:	10 92 7a 03 	sts	0x037A, r1
     fce:	10 92 79 03 	sts	0x0379, r1
        ucRTUBuf[usRcvBufferPos++] = ucByte;
     fd2:	80 91 79 03 	lds	r24, 0x0379
     fd6:	90 91 7a 03 	lds	r25, 0x037A
     fda:	9c 01       	movw	r18, r24
     fdc:	2f 5f       	subi	r18, 0xFF	; 255
     fde:	3f 4f       	sbci	r19, 0xFF	; 255
     fe0:	30 93 7a 03 	sts	0x037A, r19
     fe4:	20 93 79 03 	sts	0x0379, r18
     fe8:	29 81       	ldd	r18, Y+1	; 0x01
     fea:	fc 01       	movw	r30, r24
     fec:	e1 57       	subi	r30, 0x71	; 113
     fee:	fc 4f       	sbci	r31, 0xFC	; 252
     ff0:	20 83       	st	Z, r18
        eRcvState = STATE_RX_RCV;
     ff2:	82 e0       	ldi	r24, 0x02	; 2
     ff4:	80 93 7f 03 	sts	0x037F, r24

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
     ff8:	0c d1       	rcall	.+536    	; 0x1212 <vMBPortTimersEnable>
        break;
     ffa:	1d c0       	rjmp	.+58     	; 0x1036 <xMBRTUReceiveFSM+0x98>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
     ffc:	80 91 79 03 	lds	r24, 0x0379
    1000:	90 91 7a 03 	lds	r25, 0x037A
    1004:	8f 3f       	cpi	r24, 0xFF	; 255
    1006:	91 05       	cpc	r25, r1
    1008:	09 f0       	breq	.+2      	; 0x100c <xMBRTUReceiveFSM+0x6e>
    100a:	88 f4       	brcc	.+34     	; 0x102e <xMBRTUReceiveFSM+0x90>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
    100c:	80 91 79 03 	lds	r24, 0x0379
    1010:	90 91 7a 03 	lds	r25, 0x037A
    1014:	9c 01       	movw	r18, r24
    1016:	2f 5f       	subi	r18, 0xFF	; 255
    1018:	3f 4f       	sbci	r19, 0xFF	; 255
    101a:	30 93 7a 03 	sts	0x037A, r19
    101e:	20 93 79 03 	sts	0x0379, r18
    1022:	29 81       	ldd	r18, Y+1	; 0x01
    1024:	fc 01       	movw	r30, r24
    1026:	e1 57       	subi	r30, 0x71	; 113
    1028:	fc 4f       	sbci	r31, 0xFC	; 252
    102a:	20 83       	st	Z, r18
    102c:	03 c0       	rjmp	.+6      	; 0x1034 <xMBRTUReceiveFSM+0x96>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
    102e:	83 e0       	ldi	r24, 0x03	; 3
    1030:	80 93 7f 03 	sts	0x037F, r24
        }
        vMBPortTimersEnable(  );
    1034:	ee d0       	rcall	.+476    	; 0x1212 <vMBPortTimersEnable>
        break;
    }
    return xTaskNeedSwitch;
}
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	0f 90       	pop	r0
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	08 95       	ret

00001040 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
    1040:	cf 93       	push	r28
    BOOL            xNeedPoll = FALSE;

    assert( eRcvState == STATE_RX_IDLE );

    switch ( eSndState )
    1042:	80 91 80 03 	lds	r24, 0x0380
    1046:	88 23       	and	r24, r24
    1048:	19 f0       	breq	.+6      	; 0x1050 <xMBRTUTransmitFSM+0x10>
    104a:	81 30       	cpi	r24, 0x01	; 1
    104c:	31 f0       	breq	.+12     	; 0x105a <xMBRTUTransmitFSM+0x1a>
    104e:	2e c0       	rjmp	.+92     	; 0x10ac <xMBRTUTransmitFSM+0x6c>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
    1050:	60 e0       	ldi	r22, 0x00	; 0
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	6e d0       	rcall	.+220    	; 0x1132 <vMBPortSerialEnable>
}

BOOL
xMBRTUTransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    1056:	c0 e0       	ldi	r28, 0x00	; 0
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
        break;
    1058:	2a c0       	rjmp	.+84     	; 0x10ae <xMBRTUTransmitFSM+0x6e>

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
    105a:	80 91 7b 03 	lds	r24, 0x037B
    105e:	90 91 7c 03 	lds	r25, 0x037C
    1062:	89 2b       	or	r24, r25
    1064:	d1 f0       	breq	.+52     	; 0x109a <xMBRTUTransmitFSM+0x5a>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
    1066:	e0 91 7d 03 	lds	r30, 0x037D
    106a:	f0 91 7e 03 	lds	r31, 0x037E
    106e:	80 81       	ld	r24, Z
    1070:	ac d0       	rcall	.+344    	; 0x11ca <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
    1072:	80 91 7d 03 	lds	r24, 0x037D
    1076:	90 91 7e 03 	lds	r25, 0x037E
    107a:	01 96       	adiw	r24, 0x01	; 1
    107c:	90 93 7e 03 	sts	0x037E, r25
    1080:	80 93 7d 03 	sts	0x037D, r24
            usSndBufferCount--;
    1084:	80 91 7b 03 	lds	r24, 0x037B
    1088:	90 91 7c 03 	lds	r25, 0x037C
    108c:	01 97       	sbiw	r24, 0x01	; 1
    108e:	90 93 7c 03 	sts	0x037C, r25
    1092:	80 93 7b 03 	sts	0x037B, r24
}

BOOL
xMBRTUTransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    1096:	c0 e0       	ldi	r28, 0x00	; 0
    1098:	0a c0       	rjmp	.+20     	; 0x10ae <xMBRTUTransmitFSM+0x6e>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
            usSndBufferCount--;
        }
        else
        {
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
    109a:	83 e0       	ldi	r24, 0x03	; 3
    109c:	35 d0       	rcall	.+106    	; 0x1108 <xMBPortEventPost>
    109e:	c8 2f       	mov	r28, r24
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
    10a0:	60 e0       	ldi	r22, 0x00	; 0
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	46 d0       	rcall	.+140    	; 0x1132 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
    10a6:	10 92 80 03 	sts	0x0380, r1
    10aa:	01 c0       	rjmp	.+2      	; 0x10ae <xMBRTUTransmitFSM+0x6e>
}

BOOL
xMBRTUTransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
    10ac:	c0 e0       	ldi	r28, 0x00	; 0
        }
        break;
    }

    return xNeedPoll;
}
    10ae:	8c 2f       	mov	r24, r28
    10b0:	cf 91       	pop	r28
    10b2:	08 95       	ret

000010b4 <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
    10b4:	cf 93       	push	r28
    BOOL            xNeedPoll = FALSE;

    switch ( eRcvState )
    10b6:	80 91 7f 03 	lds	r24, 0x037F
    10ba:	88 23       	and	r24, r24
    10bc:	19 f0       	breq	.+6      	; 0x10c4 <xMBRTUTimerT35Expired+0x10>
    10be:	82 30       	cpi	r24, 0x02	; 2
    10c0:	29 f0       	breq	.+10     	; 0x10cc <xMBRTUTimerT35Expired+0x18>
    10c2:	08 c0       	rjmp	.+16     	; 0x10d4 <xMBRTUTimerT35Expired+0x20>
    {
        /* Timer t35 expired. Startup phase is finished. */
    case STATE_RX_INIT:
        xNeedPoll = xMBPortEventPost( EV_READY );
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	20 d0       	rcall	.+64     	; 0x1108 <xMBPortEventPost>
    10c8:	c8 2f       	mov	r28, r24
        break;
    10ca:	05 c0       	rjmp	.+10     	; 0x10d6 <xMBRTUTimerT35Expired+0x22>

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	1c d0       	rcall	.+56     	; 0x1108 <xMBPortEventPost>
    10d0:	c8 2f       	mov	r28, r24
        break;
    10d2:	01 c0       	rjmp	.+2      	; 0x10d6 <xMBRTUTimerT35Expired+0x22>
}

BOOL
xMBRTUTimerT35Expired( void )
{
    BOOL            xNeedPoll = FALSE;
    10d4:	c0 e0       	ldi	r28, 0x00	; 0
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
    10d6:	b2 d0       	rcall	.+356    	; 0x123c <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	80 93 7f 03 	sts	0x037F, r24

    return xNeedPoll;
}
    10de:	8c 2f       	mov	r24, r28
    10e0:	cf 91       	pop	r28
    10e2:	08 95       	ret

000010e4 <prveMBError2Exception>:
eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
    eMBException    eStatus;

    switch ( eErrorCode )
    10e4:	81 30       	cpi	r24, 0x01	; 1
    10e6:	51 f0       	breq	.+20     	; 0x10fc <prveMBError2Exception+0x18>
    10e8:	18 f0       	brcs	.+6      	; 0x10f0 <prveMBError2Exception+0xc>
    10ea:	87 30       	cpi	r24, 0x07	; 7
    10ec:	19 f0       	breq	.+6      	; 0x10f4 <prveMBError2Exception+0x10>
    10ee:	04 c0       	rjmp	.+8      	; 0x10f8 <prveMBError2Exception+0x14>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	08 95       	ret
        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
            break;

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
    10f4:	86 e0       	ldi	r24, 0x06	; 6
            break;
    10f6:	08 95       	ret

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
    10f8:	84 e0       	ldi	r24, 0x04	; 4
            break;
    10fa:	08 95       	ret
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
            break;

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
    10fc:	82 e0       	ldi	r24, 0x02	; 2
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
            break;
    }

    return eStatus;
}
    10fe:	08 95       	ret

00001100 <xMBPortEventInit>:

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
    xEventInQueue = FALSE;
    1100:	10 92 81 03 	sts	0x0381, r1
    return TRUE;
}
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	08 95       	ret

00001108 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
    xEventInQueue = TRUE;
    1108:	91 e0       	ldi	r25, 0x01	; 1
    110a:	90 93 81 03 	sts	0x0381, r25
    eQueuedEvent = eEvent;
    110e:	80 93 82 03 	sts	0x0382, r24
    return TRUE;
}
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	08 95       	ret

00001116 <xMBPortEventGet>:
BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
    BOOL            xEventHappened = FALSE;

    if( xEventInQueue )
    1116:	20 91 81 03 	lds	r18, 0x0381
    111a:	22 23       	and	r18, r18
    111c:	41 f0       	breq	.+16     	; 0x112e <xMBPortEventGet+0x18>
    {
        *eEvent = eQueuedEvent;
    111e:	20 91 82 03 	lds	r18, 0x0382
    1122:	fc 01       	movw	r30, r24
    1124:	20 83       	st	Z, r18
        xEventInQueue = FALSE;
    1126:	10 92 81 03 	sts	0x0381, r1
        xEventHappened = TRUE;
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	08 95       	ret
}

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
    BOOL            xEventHappened = FALSE;
    112e:	80 e0       	ldi	r24, 0x00	; 0
        *eEvent = eQueuedEvent;
        xEventInQueue = FALSE;
        xEventHappened = TRUE;
    }
    return xEventHappened;
}
    1130:	08 95       	ret

00001132 <vMBPortSerialEnable>:
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
#ifdef RTS_ENABLE
    UCSRB |= _BV( TXEN ) | _BV(TXCIE);
#else
    UCSRB |= _BV( TXEN );
    1132:	53 9a       	sbi	0x0a, 3	; 10
#endif

    if( xRxEnable )
    1134:	88 23       	and	r24, r24
    1136:	21 f0       	breq	.+8      	; 0x1140 <vMBPortSerialEnable+0xe>
    {
        UCSRB |= _BV( RXEN ) | _BV( RXCIE );
    1138:	8a b1       	in	r24, 0x0a	; 10
    113a:	80 69       	ori	r24, 0x90	; 144
    113c:	8a b9       	out	0x0a, r24	; 10
    113e:	03 c0       	rjmp	.+6      	; 0x1146 <vMBPortSerialEnable+0x14>
    }
    else
    {
        UCSRB &= ~( _BV( RXEN ) | _BV( RXCIE ) );
    1140:	8a b1       	in	r24, 0x0a	; 10
    1142:	8f 76       	andi	r24, 0x6F	; 111
    1144:	8a b9       	out	0x0a, r24	; 10
    }

    if( xTxEnable )
    1146:	66 23       	and	r22, r22
    1148:	21 f0       	breq	.+8      	; 0x1152 <vMBPortSerialEnable+0x20>
    {
        UCSRB |= _BV( TXEN ) | _BV( UDRE );
    114a:	8a b1       	in	r24, 0x0a	; 10
    114c:	88 62       	ori	r24, 0x28	; 40
    114e:	8a b9       	out	0x0a, r24	; 10
    1150:	08 95       	ret
        RTS_HIGH;
#endif
    }
    else
    {
        UCSRB &= ~( _BV( UDRE ) );
    1152:	55 98       	cbi	0x0a, 5	; 10
    1154:	08 95       	ret

00001156 <xMBPortSerialInit>:
    }
}

BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
    1156:	0f 93       	push	r16
    1158:	cf 93       	push	r28
    115a:	c2 2f       	mov	r28, r18
    UCHAR ucUCSRC = 0;

    /* prevent compiler warning. */
    (void)ucPORT;
	
    UBRR = UART_BAUD_CALC( ulBaudRate, F_CPU );
    115c:	db 01       	movw	r26, r22
    115e:	ca 01       	movw	r24, r20
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	aa 1f       	adc	r26, r26
    1166:	bb 1f       	adc	r27, r27
    1168:	88 0f       	add	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	aa 1f       	adc	r26, r26
    116e:	bb 1f       	adc	r27, r27
    1170:	9c 01       	movw	r18, r24
    1172:	ad 01       	movw	r20, r26
    1174:	22 0f       	add	r18, r18
    1176:	33 1f       	adc	r19, r19
    1178:	44 1f       	adc	r20, r20
    117a:	55 1f       	adc	r21, r21
    117c:	22 0f       	add	r18, r18
    117e:	33 1f       	adc	r19, r19
    1180:	44 1f       	adc	r20, r20
    1182:	55 1f       	adc	r21, r21
    1184:	60 e0       	ldi	r22, 0x00	; 0
    1186:	72 e1       	ldi	r23, 0x12	; 18
    1188:	8a e7       	ldi	r24, 0x7A	; 122
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	8c d0       	rcall	.+280    	; 0x12a6 <__udivmodsi4>
    118e:	21 50       	subi	r18, 0x01	; 1
    1190:	29 b9       	out	0x09, r18	; 9

    switch ( eParity )
    1192:	01 30       	cpi	r16, 0x01	; 1
    1194:	21 f0       	breq	.+8      	; 0x119e <xMBPortSerialInit+0x48>
    1196:	02 30       	cpi	r16, 0x02	; 2
    1198:	21 f0       	breq	.+8      	; 0x11a2 <xMBPortSerialInit+0x4c>
}

BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
    UCHAR ucUCSRC = 0;
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	03 c0       	rjmp	.+6      	; 0x11a4 <xMBPortSerialInit+0x4e>
    {
        case MB_PAR_EVEN:
            ucUCSRC |= _BV( UPM1 );
            break;
        case MB_PAR_ODD:
            ucUCSRC |= _BV( UPM1 ) | _BV( UPM0 );
    119e:	80 e3       	ldi	r24, 0x30	; 48
            break;
    11a0:	01 c0       	rjmp	.+2      	; 0x11a4 <xMBPortSerialInit+0x4e>
    UBRR = UART_BAUD_CALC( ulBaudRate, F_CPU );

    switch ( eParity )
    {
        case MB_PAR_EVEN:
            ucUCSRC |= _BV( UPM1 );
    11a2:	80 e2       	ldi	r24, 0x20	; 32
            break;
        case MB_PAR_NONE:
            break;
    }

    switch ( ucDataBits )
    11a4:	c7 30       	cpi	r28, 0x07	; 7
    11a6:	21 f0       	breq	.+8      	; 0x11b0 <xMBPortSerialInit+0x5a>
    11a8:	c8 30       	cpi	r28, 0x08	; 8
    11aa:	19 f4       	brne	.+6      	; 0x11b2 <xMBPortSerialInit+0x5c>
    {
        case 8:
            ucUCSRC |= _BV( UCSZ0 ) | _BV( UCSZ1 );
    11ac:	86 60       	ori	r24, 0x06	; 6
            break;
    11ae:	01 c0       	rjmp	.+2      	; 0x11b2 <xMBPortSerialInit+0x5c>
        case 7:
            ucUCSRC |= _BV( UCSZ1 );
    11b0:	84 60       	ori	r24, 0x04	; 4
#elif defined (__AVR_ATmega16__)
    UCSRC = _BV( URSEL ) | ucUCSRC;
#elif defined (__AVR_ATmega32__)
    UCSRC = _BV( URSEL ) | ucUCSRC;
#elif defined (__AVR_ATmega128__)
    UCSRC |= ucUCSRC;
    11b2:	e5 e9       	ldi	r30, 0x95	; 149
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	90 81       	ld	r25, Z
    11b8:	89 2b       	or	r24, r25
    11ba:	80 83       	st	Z, r24
#endif

    vMBPortSerialEnable( FALSE, FALSE );
    11bc:	60 e0       	ldi	r22, 0x00	; 0
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	b8 df       	rcall	.-144    	; 0x1132 <vMBPortSerialEnable>

#ifdef RTS_ENABLE
    RTS_INIT;
#endif
    return TRUE;
}
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	cf 91       	pop	r28
    11c6:	0f 91       	pop	r16
    11c8:	08 95       	ret

000011ca <xMBPortSerialPutByte>:

BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
    UDR = ucByte;
    11ca:	8c b9       	out	0x0c, r24	; 12
    return TRUE;
}
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	08 95       	ret

000011d0 <xMBPortSerialGetByte>:

BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
    *pucByte = UDR;
    11d0:	2c b1       	in	r18, 0x0c	; 12
    11d2:	fc 01       	movw	r30, r24
    11d4:	20 83       	st	Z, r18
    return TRUE;
}
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	08 95       	ret

000011da <xMBPortTimersInit>:
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
    /* Calculate overflow counter an OCR values for Timer1. */
    usTimerOCRADelta =
        ( MB_TIMER_TICKS * usTim1Timerout50us ) / ( MB_50US_TICKS );
    11da:	9c 01       	movw	r18, r24
    11dc:	a4 e8       	ldi	r26, 0x84	; 132
    11de:	be e1       	ldi	r27, 0x1E	; 30
    11e0:	84 d0       	rcall	.+264    	; 0x12ea <__umulhisi3>
    11e2:	20 e2       	ldi	r18, 0x20	; 32
    11e4:	3e e4       	ldi	r19, 0x4E	; 78
    11e6:	40 e0       	ldi	r20, 0x00	; 0
    11e8:	50 e0       	ldi	r21, 0x00	; 0
    11ea:	5d d0       	rcall	.+186    	; 0x12a6 <__udivmodsi4>
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
    /* Calculate overflow counter an OCR values for Timer1. */
    usTimerOCRADelta =
    11ec:	30 93 84 03 	sts	0x0384, r19
    11f0:	20 93 83 03 	sts	0x0383, r18
        ( MB_TIMER_TICKS * usTim1Timerout50us ) / ( MB_50US_TICKS );

    TCCR1A = 0x00;
    11f4:	1f bc       	out	0x2f, r1	; 47
    TCCR1B = 0x00;
    11f6:	1e bc       	out	0x2e, r1	; 46
    TCCR1C = 0x00;
    11f8:	10 92 7a 00 	sts	0x007A, r1

inline void
vMBPortTimersDisable(  )
{
    /* Disable the timer. */
    TCCR1B &= ~( _BV( CS12 ) | _BV( CS10 ) );
    11fc:	8e b5       	in	r24, 0x2e	; 46
    11fe:	8a 7f       	andi	r24, 0xFA	; 250
    1200:	8e bd       	out	0x2e, r24	; 46
    /* Disable the output compare interrupts for channel A/B. */
    TIMSK1 &= ~( _BV( OCIE1A ) );
    1202:	87 b7       	in	r24, 0x37	; 55
    1204:	8f 7e       	andi	r24, 0xEF	; 239
    1206:	87 bf       	out	0x37, r24	; 55
    /* Clear output compare flags for channel A/B. */
    TIFR1 |= _BV( OCF1A ) ;
    1208:	86 b7       	in	r24, 0x36	; 54
    120a:	80 61       	ori	r24, 0x10	; 16
    120c:	86 bf       	out	0x36, r24	; 54
    TCCR1C = 0x00;

    vMBPortTimersDisable(  );

    return TRUE;
}
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	08 95       	ret

00001212 <vMBPortTimersEnable>:


inline void
vMBPortTimersEnable(  )
{
    TCNT1 = 0x0000;
    1212:	1d bc       	out	0x2d, r1	; 45
    1214:	1c bc       	out	0x2c, r1	; 44
    if( usTimerOCRADelta > 0 )
    1216:	80 91 83 03 	lds	r24, 0x0383
    121a:	90 91 84 03 	lds	r25, 0x0384
    121e:	89 2b       	or	r24, r25
    1220:	49 f0       	breq	.+18     	; 0x1234 <vMBPortTimersEnable+0x22>
    {
        TIMSK1 |= _BV( OCIE1A );
    1222:	87 b7       	in	r24, 0x37	; 55
    1224:	80 61       	ori	r24, 0x10	; 16
    1226:	87 bf       	out	0x37, r24	; 55
        OCR1A = usTimerOCRADelta;
    1228:	80 91 83 03 	lds	r24, 0x0383
    122c:	90 91 84 03 	lds	r25, 0x0384
    1230:	9b bd       	out	0x2b, r25	; 43
    1232:	8a bd       	out	0x2a, r24	; 42
    }

    TCCR1B |= _BV( CS12 ) | _BV( CS10 );
    1234:	8e b5       	in	r24, 0x2e	; 46
    1236:	85 60       	ori	r24, 0x05	; 5
    1238:	8e bd       	out	0x2e, r24	; 46
    123a:	08 95       	ret

0000123c <vMBPortTimersDisable>:

inline void
vMBPortTimersDisable(  )
{
    /* Disable the timer. */
    TCCR1B &= ~( _BV( CS12 ) | _BV( CS10 ) );
    123c:	8e b5       	in	r24, 0x2e	; 46
    123e:	8a 7f       	andi	r24, 0xFA	; 250
    1240:	8e bd       	out	0x2e, r24	; 46
    /* Disable the output compare interrupts for channel A/B. */
    TIMSK1 &= ~( _BV( OCIE1A ) );
    1242:	87 b7       	in	r24, 0x37	; 55
    1244:	8f 7e       	andi	r24, 0xEF	; 239
    1246:	87 bf       	out	0x37, r24	; 55
    /* Clear output compare flags for channel A/B. */
    TIFR1 |= _BV( OCF1A ) ;
    1248:	86 b7       	in	r24, 0x36	; 54
    124a:	80 61       	ori	r24, 0x10	; 16
    124c:	86 bf       	out	0x36, r24	; 54
    124e:	08 95       	ret

00001250 <__vector_12>:
}

SIGNAL( TIMER1_COMPA_vect  )
{
    1250:	1f 92       	push	r1
    1252:	0f 92       	push	r0
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	0f 92       	push	r0
    1258:	11 24       	eor	r1, r1
    125a:	0b b6       	in	r0, 0x3b	; 59
    125c:	0f 92       	push	r0
    125e:	2f 93       	push	r18
    1260:	3f 93       	push	r19
    1262:	4f 93       	push	r20
    1264:	5f 93       	push	r21
    1266:	6f 93       	push	r22
    1268:	7f 93       	push	r23
    126a:	8f 93       	push	r24
    126c:	9f 93       	push	r25
    126e:	af 93       	push	r26
    1270:	bf 93       	push	r27
    1272:	ef 93       	push	r30
    1274:	ff 93       	push	r31
    ( void )pxMBPortCBTimerExpired(  );
    1276:	e0 91 87 03 	lds	r30, 0x0387
    127a:	f0 91 88 03 	lds	r31, 0x0388
    127e:	09 95       	icall
}
    1280:	ff 91       	pop	r31
    1282:	ef 91       	pop	r30
    1284:	bf 91       	pop	r27
    1286:	af 91       	pop	r26
    1288:	9f 91       	pop	r25
    128a:	8f 91       	pop	r24
    128c:	7f 91       	pop	r23
    128e:	6f 91       	pop	r22
    1290:	5f 91       	pop	r21
    1292:	4f 91       	pop	r20
    1294:	3f 91       	pop	r19
    1296:	2f 91       	pop	r18
    1298:	0f 90       	pop	r0
    129a:	0b be       	out	0x3b, r0	; 59
    129c:	0f 90       	pop	r0
    129e:	0f be       	out	0x3f, r0	; 63
    12a0:	0f 90       	pop	r0
    12a2:	1f 90       	pop	r1
    12a4:	18 95       	reti

000012a6 <__udivmodsi4>:
    12a6:	a1 e2       	ldi	r26, 0x21	; 33
    12a8:	1a 2e       	mov	r1, r26
    12aa:	aa 1b       	sub	r26, r26
    12ac:	bb 1b       	sub	r27, r27
    12ae:	fd 01       	movw	r30, r26
    12b0:	0d c0       	rjmp	.+26     	; 0x12cc <__udivmodsi4_ep>

000012b2 <__udivmodsi4_loop>:
    12b2:	aa 1f       	adc	r26, r26
    12b4:	bb 1f       	adc	r27, r27
    12b6:	ee 1f       	adc	r30, r30
    12b8:	ff 1f       	adc	r31, r31
    12ba:	a2 17       	cp	r26, r18
    12bc:	b3 07       	cpc	r27, r19
    12be:	e4 07       	cpc	r30, r20
    12c0:	f5 07       	cpc	r31, r21
    12c2:	20 f0       	brcs	.+8      	; 0x12cc <__udivmodsi4_ep>
    12c4:	a2 1b       	sub	r26, r18
    12c6:	b3 0b       	sbc	r27, r19
    12c8:	e4 0b       	sbc	r30, r20
    12ca:	f5 0b       	sbc	r31, r21

000012cc <__udivmodsi4_ep>:
    12cc:	66 1f       	adc	r22, r22
    12ce:	77 1f       	adc	r23, r23
    12d0:	88 1f       	adc	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	1a 94       	dec	r1
    12d6:	69 f7       	brne	.-38     	; 0x12b2 <__udivmodsi4_loop>
    12d8:	60 95       	com	r22
    12da:	70 95       	com	r23
    12dc:	80 95       	com	r24
    12de:	90 95       	com	r25
    12e0:	9b 01       	movw	r18, r22
    12e2:	ac 01       	movw	r20, r24
    12e4:	bd 01       	movw	r22, r26
    12e6:	cf 01       	movw	r24, r30
    12e8:	08 95       	ret

000012ea <__umulhisi3>:
    12ea:	a2 9f       	mul	r26, r18
    12ec:	b0 01       	movw	r22, r0
    12ee:	b3 9f       	mul	r27, r19
    12f0:	c0 01       	movw	r24, r0
    12f2:	a3 9f       	mul	r26, r19
    12f4:	70 0d       	add	r23, r0
    12f6:	81 1d       	adc	r24, r1
    12f8:	11 24       	eor	r1, r1
    12fa:	91 1d       	adc	r25, r1
    12fc:	b2 9f       	mul	r27, r18
    12fe:	70 0d       	add	r23, r0
    1300:	81 1d       	adc	r24, r1
    1302:	11 24       	eor	r1, r1
    1304:	91 1d       	adc	r25, r1
    1306:	08 95       	ret

00001308 <memcpy>:
    1308:	fb 01       	movw	r30, r22
    130a:	dc 01       	movw	r26, r24
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <memcpy+0xa>
    130e:	01 90       	ld	r0, Z+
    1310:	0d 92       	st	X+, r0
    1312:	41 50       	subi	r20, 0x01	; 1
    1314:	50 40       	sbci	r21, 0x00	; 0
    1316:	d8 f7       	brcc	.-10     	; 0x130e <memcpy+0x6>
    1318:	08 95       	ret

0000131a <_exit>:
    131a:	f8 94       	cli

0000131c <__stop_program>:
    131c:	ff cf       	rjmp	.-2      	; 0x131c <__stop_program>
